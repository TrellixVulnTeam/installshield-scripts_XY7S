#define OFN_FILEMUSTEXIST            0x00001000
#define OFN_PATHMUSTEXIST            0x00000800
#define OFN_HIDEREADONLY             0x00000004
#define OFN_NOCHANGEDIR              0x00000008
#define OFN_EXPLORER                 0x00080000

typedef STR260
begin
   STRING sz[260];
end;

typedef OPENFILENAME
	begin
		LONG     lStructSize;
		HWND     hwndOwner;
		HWND     hInstance;
		POINTER  lpstrFilter;
		POINTER  lpstrCustomFilter;
		LONG     nMaxCustFilter;
		LONG     nFilterIndex;
		POINTER  lpstrFile;
		LONG     nMaxFile;
		POINTER  lpstrFileTitle;
		LONG     nMaxFileTitle;
		POINTER  lpstrInitialDir;
		POINTER  lpstrTitle;
		LONG     Flags;
		SHORT    nFileOffset;
		SHORT    nFileExtension;
		POINTER  lpstrDefExt;
		POINTER  lCustData;
		POINTER  lpfnHook;
		POINTER  lpTemplateName;
	end;
		
prototype comdlg32.GetOpenFileNameA( LONG );
prototype FileBrowseDlg( BYREF STRING, STRING, STRING, STRING);
prototype STRING RecordTimeLog();
prototype WriteLogFile( STRING );
prototype DeleteLogFile(); 
prototype RunApplication( STRING , STRING, BOOL, BOOL, BOOL); 
prototype STRING ReadString(STRING,STRING,BOOL);
prototype StrIsNums( STRING );
prototype STRING GetOSEnvVar(STRING);
prototype DeleteFolder(STRING);
prototype getParentPath(STRING,BYREF STRING);
prototype CheckPathSpecChar(STRING);
prototype CheckPathSpecCharSlient(STRING);
prototype WriteInfo(); 
prototype writeinfouninstall();
prototype WriteRegistryRM();
prototype WriteRegistryRabbitMQ();
prototype DoUninstallRMServices();
prototype DoInstallRMServices(); 
prototype DoUninstallRabbitMQServices();
prototype DoInstallRabbitMQServices(); 
prototype FormatVer(STRING,BYREF STRING); 
prototype CopyFileToDes(STRING,STRING); 
prototype cdecl BOOL WriteVersion.AU_WriteInfo(BYVAL STRING,BYVAL STRING,BYVAL STRING);
prototype cdecl BOOL WriteVersion.AU_GenerateGuid(BYVAL STRING);
prototype WriteCookieFile(STRING);
prototype NUMBER checkIPAddress(STRING);
prototype SdMongoDB();
prototype SdRabbitMQ();
prototype SdRabbitMQServers();
prototype ShowListContentFromTxt(STRING,STRING,LIST,STRING,STRING);
prototype WriteRegistryDump();
prototype DeleteRegistryDump();
prototype WriteRegistryAMQPOptions();



function WriteLogFile( svContent )   
 	NUMBER   FileHandle;   
	NUMBER   nResult;
	STRING	 svResult;
begin           
	nResult = FindFile ( LOGFILE_PATH,  LOGFILE_NAME, svResult ); 
	
	OpenFileMode (FILE_MODE_APPEND);  
	if( nResult < 0 ) then
		nResult = CreateFile(FileHandle, LOGFILE_PATH,  LOGFILE_NAME );  
	else
		nResult = OpenFile(FileHandle, LOGFILE_PATH,  LOGFILE_NAME );  
	endif;
	
	if( nResult < 0 ) then  
		return -1;
	endif; 
 
	nResult = WriteLine(FileHandle,"");
	nResult = WriteLine(FileHandle,RecordTimeLog());
 
    nResult = WriteLine(FileHandle,svContent);     
    CloseFile(FileHandle);    
    return 0;
end; 

function STRING RecordTimeLog()
	number  nvReturn1;
	string  svResult1,szDateTimetmp;
begin   	
	   	GetSystemInfo( DATE, nvReturn1, svResult1 );  
   		szDateTimetmp = svResult1;
   		szDateTimetmp = szDateTimetmp + " ";
   		GetSystemInfo( TIME, nvReturn1, svResult1 );
   		szDateTimetmp = szDateTimetmp + svResult1; 
   		return szDateTimetmp;
   		//WriteLogFile(szDateTimetmp);     		
end;


function RunApplication( cmd , param, bShow, bWait,bShell )
    number nShowWindow;
    number nOptions;
begin
	LongPathToQuote( cmd, TRUE );
	//LongPathToQuote( param, TRUE );
	if( bShell = TRUE ) then 
		param=param+" >> "+LOGFILE+" 2>>^&1";                 
	endif;
	nShowWindow = SW_NORMAL;
	nOptions = LAAW_OPTION_CHANGEDIRECTORY | LAAW_OPTION_FIXUP_PROGRAM;
	if( bShow = FALSE ) then 
		nShowWindow = SW_HIDE; 
		nOptions |= LAAW_OPTION_HIDDEN;
	endif;     	
	if( bWait = TRUE ) then 
		nOptions |= LAAW_OPTION_WAIT; 
	else                           
		nOptions |= LAAW_OPTION_NOWAIT; 
	endif;
	
	LaunchApplication( cmd, param, "", nShowWindow, INFINITE, nOptions  ); 
	 WriteLogFile( LAAW_PARAMETERS.szCommandLineResult);
	 WriteLogFile( LAAW_PARAMETERS.szStatusText );
	
	return LAAW_PARAMETERS.nLaunchResult;

     
	     
end;  



function DeleteLogFile() 
	NUMBER nvRet;
begin

    nvRet = DeleteFile ( LOGFILE_PATH + LOGFILE_NAME );
    if( nvRet = 0 || nvRet = ISERR_FILE_NOT_FOUND  ) then 
    	return 0;
    else 
    	return -1;
    endif;
end;    


function STRING GetOSEnvVar(svOSvar) 
NUMBER nFileHandle;   
STRING svLine;
begin   
    
    LaunchAppAndWait( SystemFolder^"cmd.exe" , "/c echo %"+svOSvar+"% >"+SUPPORTDIR^"OSVAR",WAIT|LAAW_OPTION_HIDDEN);
    
    OpenFileMode (FILE_MODE_NORMAL); 
     
    OpenFile (nFileHandle, SUPPORTDIR, "OSVAR"); 
    GetLine (nFileHandle, svLine);
    CloseFile (nFileHandle); 

    return svLine;
   
       
end;


function DeleteFolder(szFolderPath)   
NUMBER nResult;   
STRING szFileName;    
LIST listID;
begin  
	if (ExistsDir (szFolderPath)=EXISTS) then 
	WriteLogFile("There exits dir:"+szFolderPath); 
	    nResult=FindAllFiles(szFolderPath,"*.*",szFileName,RESET);
        while(nResult = 0)
	        SetFileInfo (szFileName ,FILE_ATTRIBUTE , FILE_ATTR_NORMAL ,"" );
	        nResult=FindAllFiles(szFolderPath,"*.*",szFileName,CONTINUE); 
        endwhile;               
        
        DeleteAgain:
        if DeleteDir(szFolderPath, ROOT)<0 then 
        	nResult=SdFilesInUse("Files in Use","Can not delete the following folder(s) because files are being used. Save your work and click Retry to continue.",szFolderPath,listID);    
        	if (nResult = IDRETRY) then
       			goto DeleteAgain;   
       		endif;
        endif;
        WriteLogFile("End delete folder"+szFolderPath); 
    endif;		
end; 

function STRING ReadString(sStringDir ,sStringFile,bonlyline) 
	STRING  svLine;
	STRING  svResult;   
    NUMBER   nFileHandle;  
    NUMBER   nResult;    
    NUMBER   nvResult;  
begin           
	nResult = FindFile ( sStringDir,  sStringFile, svResult ); 
	if(0>nResult) then
		return "";
	endif;
	if (bonlyline==TRUE) then 
		OpenFileMode (FILE_MODE_NORMAL);    
	else
		OpenFileMode (FILE_MODE_BINARYREADONLY);
	endif;
	if(0>OpenFile(nFileHandle,sStringDir,sStringFile)) then
		return "";                                                   		
	endif;     
	if (bonlyline==TRUE) then  
	    if (GetLine (nFileHandle, svLine) != 0)  then 
            svLine= "";    
        endif;
    else  
    	GetFileInfo ( sStringDir + sStringFile, FILE_SIZE, nvResult, svResult ); 
    	if (ReadBytes (nFileHandle, svLine, 0, nvResult) < 0) then 
        	svLine= "";
    	endif;
	endif;    
    CloseFile (nFileHandle);    
    return svLine;
end; 



function StrIsNums( svStr )
	NUMBER iLength, iVal; 
begin
	iVal = 0;
	iLength = StrLength (svStr); 
	while (iVal < iLength) 
		if(  svStr[iVal] < '0' ||  svStr[iVal] > '9' ) then
			return -1;                                                  
		endif;
		iVal++; 
	endwhile;   
	return 0;
end; 

function getParentPath(szPath,svParentPath) 
LIST listID; 
STRING svStr;
NUMBER nResult;
begin 
   
    StrRemoveLastSlash ( szPath );
 	listID = ListCreate (STRINGLIST); 
 	StrGetTokens ( listID , szPath , "\\" );  
 	ListSetIndex (listID, LISTLAST);   
 	ListDeleteString ( listID ); 
 	 	
 	ListGetFirstString(listID,svStr); 
    svParentPath="";
    while (nResult != END_OF_LIST) 
    	svParentPath=svParentPath^svStr;
    	nResult = ListGetNextString (listID, svStr);
    endwhile;
     	
end; 

function CheckPathSpecChar(spathtocheck)
begin  
	//return (1);
	//#$%^&@~`!;',
	if(StrFind (spathtocheck, "#")>-1 ||StrFind (spathtocheck, "$")>-1 ||StrFind (spathtocheck, "%")>-1 ||StrFind (spathtocheck, "^")>-1 ||StrFind (spathtocheck, "&")>-1 ||StrFind (spathtocheck, "@")>-1||StrFind (spathtocheck, "~")>-1||StrFind (spathtocheck, "`")>-1||StrFind (spathtocheck, "!")>-1||StrFind (spathtocheck, ";")>-1||StrFind (spathtocheck, "'")>-1||StrFind (spathtocheck, ",")>-1)  then
		MessageBox("The Path can not include any of the following characters: #$%^&@~`!;', ", SEVERE);
		return (0);                            
	endif; 
	return (1);
end; 

function WriteRegistryRM()
	NUMBER nvSize,nvType, nvReturn;
	STRING svTemp, svResult;
begin
    if(SYSINFO.bIsWow64) then 
    REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;
	nvType = REGDB_STRING; 
    nvSize = -1;  
    if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
   		RegDBSetKeyValueEx(REGWORKERSERVER,"InstallDir",nvType,svRMInstalldir,nvSize);
   		RegDBSetKeyValueEx(REGWORKERSERVER,"Version",nvType,VIEWVERSION,nvSize);
    if (svFeatureRedis="1") then
        RegDBSetKeyValueEx(REGWORKERSERVER,"Redis_Version",nvType,REDIS_VERSION,nvSize); 
    endif;  		
        //RegDBSetKeyValueEx(REGROOT,REGKEY_INITDATA,nvType,"1",nvSize);		
    endif;
    endif;   
end;  

function WriteRegistryRabbitMQ()
	NUMBER nvSize,nvType, nvReturn;
	STRING svTemp, svResult;
begin
    if(SYSINFO.bIsWow64) then 
    REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;
	nvType = REGDB_STRING; 
    nvSize = -1;  
    if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
   		//RegDBSetKeyValueEx("SOFTWARE\\NetBrain\\NetBrain RabbitMQ","RabbitMQ_InstallDir",nvType,svRabbitMQInstalldir,nvSize);
   		//RegDBSetKeyValueEx("SOFTWARE\\NetBrain\\NetBrain RabbitMQ","ERLANG_VERSION",nvType,ERLANG_VERSION,nvSize);
   		//RegDBSetKeyValueEx("SOFTWARE\\NetBrain\\NetBrain RabbitMQ","RabbitMQ_VERSION",nvType,RabbitMQ_VERSION,nvSize);
   		  RegDBSetKeyValueEx(REGRABBITMQ,"RabbitMQ_InstallDir",nvType,svRabbitMQInstalldir,nvSize);
   		  RegDBSetKeyValueEx(REGRABBITMQ,"ERLANG_VERSION",nvType,ERLANG_VERSION,nvSize);
   		  RegDBSetKeyValueEx(REGRABBITMQ,"RabbitMQ_VERSION",nvType,RabbitMQ_VERSION,nvSize);
    endif;
    endif;   
end;  

function WriteInfo()
STRING svStr,svDateTime,svDate,svTime,svYear,svMonth,svDay;
NUMBER nvDate,nvTime,nId; 
LIST   listID;
STRING svLogPath,svALLUSERSPROFILE;
begin
     WriteLogFile("Write info for allusersprofile");
     //RunApplication(SUPPORTDIR^"mknetbrain.bat","\""+SETUPTYPE+"\"", FALSE,TRUE,FALSE );
     
	 GetSystemInfo(DATE,nvDate,svDate);
	 
	 listID = ListCreate (STRINGLIST);
	 StrGetTokens (listID, svDate, "-");  
	 ListGetFirstString (listID, svMonth); 
	 ListGetNextString (listID, svDay);
	 ListGetNextString (listID, svYear); 
	 ListDestroy (listID); 
	 StrToNum ( nId, svMonth );
	 if (nId <10) then  
	 svMonth= "0"+svMonth;
	 endif;
	 StrToNum ( nId, svDay );
	 if (nId <10) then  
	 svDay= "0"+svDay;
	 endif;
	 svDate=svYear+"/"+svMonth+"/"+svDay;
	  
	 GetSystemInfo(TIME,nvTime,svTime);
	 
	 svDateTime=svDate+" "+svTime; 
	 
	 svALLUSERSPROFILE=GetOSEnvVar("ALLUSERSPROFILE"); 
	 
	 StrTrim ( svALLUSERSPROFILE );
	 
	 svLogPath=svALLUSERSPROFILE^"NetBrain"^"UpdateLog"^SETUPTYPE;
	 	 
	 UseDLL ( DLLNAME ); 
	 AU_GenerateGuid(SETUPTYPE);
	 AU_WriteInfo(SETUPTYPE,"Type",SETUPTYPE);
	 AU_WriteInfo(SETUPTYPE,"Version",IFX_PRODUCT_VERSION);
	 AU_WriteInfo(SETUPTYPE,"ViewVersion",VIEWVERSION); 
	 AU_WriteInfo(SETUPTYPE,"Patch","");
	 AU_WriteInfo(SETUPTYPE,"LastUpgradeTime",svDateTime);
	 AU_WriteInfo(SETUPTYPE,"status","1");
	 AU_WriteInfo(SETUPTYPE,"LastPatchTime","");
	 AU_WriteInfo(SETUPTYPE,"InstallFolder",INSTALLDIR);
	 AU_WriteInfo(SETUPTYPE,"UpgradeLogPath",svLogPath);       
	 UnUseDLL ( DLLNAME );
	 
end;

function writeinfouninstall()
begin
	 UseDLL ( DLLNAME ); 
	 AU_WriteInfo(SETUPTYPE,"status","0");     
	 UnUseDLL ( DLLNAME );
end;

function DoInstallRMServices()
number nResult;
STRING registerResourceManager;
begin   	          
    WriteLogFile("Begin to install service NetBrain Worker Server");
          
    //nResult = RunApplication(INSTALLDIR ^ "bin\\nbproxyserver.exe","-install NS7",FALSE,TRUE,FALSE );
    //nResult = RunApplication(INSTALLDIR ^ "bin\\ResourceManagerDotNet.exe","-install",FALSE,TRUE,TRUE);
    //registerResourceManager= "create \"ResourceManager\" binpath= \""+svRMInstalldir+"\\bin\\ResourceManagerService.exe\" type= own start= auto displayname= \"ResourceManager\"";
    //WriteLogFile(registerResourceManager);
    //nResult = RunApplication(SystemFolder ^ "sc.exe",registerResourceManager,FALSE,TRUE,TRUE);
    //modify conf file begin
    /*
    if (nvCheckStandalone) then 
    nResult = RunApplication(SUPPORTDIR ^"RM_Config.bat","\""+svRMInstalldir+"\" "+"\""+svamqpip+"\" "+"\""+svamqpport+"\" "+"\""+svredisip+"\" "+"\""+svredisport+"\" "+"\""+svmongodbip+"\" "+"\""+svmongodbport+"\"",FALSE,TRUE,TRUE);
    endif;
    if (nvCheckreplicaSet) then 
    nResult = RunApplication(SUPPORTDIR ^"RM_Config_RS.bat","\""+svRMInstalldir+"\" "+"\""+svamqpip+"\" "+"\""+svamqpport+"\" "+"\""+svredisip+"\" "+"\""+svredisport+"\" "+"\""+svmongodbrepicasetstring+"\" ",FALSE,TRUE,TRUE);
    endif;
    */
    //nResult = RunApplication(SUPPORTDIR ^"RM_Config_RS.bat","\""+svRMInstalldir+"\" "+"\""+svamqpip+"\" "+"\""+svamqpport+"\" "+"\""+svredisip+"\" "+"\""+svredisport+"\" "+"\""+svreplicasetstr+"\" ",FALSE,TRUE,TRUE);
    if (svrabbitmqssl = "true") then
    if (rabbitMqTlsVersion = "1.0") then
    svrabbitmqtlsversion="Tls10";
    endif;
    if (rabbitMqTlsVersion = "1.1") then
    svrabbitmqtlsversion="Tls11";
    endif;
    if (rabbitMqTlsVersion = "1.2") then
    svrabbitmqtlsversion="Tls12";
    endif;
    nResult = RunApplication(SUPPORTDIR ^"RM_Config_SSL.bat","\""+svRMInstalldir+"\" "+"\""+rabbitmqconnectionstr+"\" "+"\""+svredisip+"\" "+"\""+svredisport+"\" "+"\""+svreplicasetstr+"\" "+"\""+rabbitMqLocalPort+"\" "+"\""+svrabbitmqtlsversion+"\" ",FALSE,TRUE,TRUE);
    else
    nResult = RunApplication(SUPPORTDIR ^"RM_Config_RS.bat","\""+svRMInstalldir+"\" "+"\""+rabbitmqconnectionstr+"\" "+"\""+svredisip+"\" "+"\""+svredisport+"\" "+"\""+svreplicasetstr+"\" "+"\""+rabbitMqLocalPort+"\" ",FALSE,TRUE,TRUE);
    endif;
    if (nResult!=0) then
   		WriteLogFile("Fail to modify fix_RMConfig.json"); 
   	else 
   	    WriteLogFile("Success to modify fix_RMConfig.json"); 
   	endif;
    //modify conf file end
    nResult = RunApplication(SUPPORTDIR ^"installRMservice.bat","\""+svRMInstalldir+"\"",FALSE,TRUE,TRUE);
    if (nResult!=0) then
   		WriteLogFile("Fail to install service NetBrain Worker Server"); 
   	else 
   	    //RunApplication(SystemFolder ^ "sc.exe","failure ResourceManager reset= 0 actions= restart/5000",FALSE,TRUE,TRUE);   
   		//RunApplication(SystemFolder ^ "net.exe", "start \"ResourceManager\"",FALSE,TRUE,TRUE);
    	WriteLogFile("Success to install service NetBrain Worker Server");
    endif;
    
end;   

function DoUninstallRMServices()
number nResult,nvResult;
begin
    if ( ServiceExistsService ( "ResourceManager" )) then 
   		ServiceGetServiceState ("ResourceManager" , nvResult );
	     if ( nvResult=SERVICE_STOPPED )   then
         	WriteLogFile("The NetBrain Worker Server Service has been stopped.");
         else
			ServiceStopService ( "ResourceManager"  ); 
         endif;
        nResult = RunApplication("taskkill" , "/F /IM ResourceManagerService.exe /T", FALSE,TRUE,FALSE );
        //nResult = RunApplication("taskkill" , "/F /IM NBProxyServerDaemon.exe /T", FALSE,TRUE,FALSE );
        if (nResult!=0) then
    		WriteLogFile("Fail to taskkill ResourceManagerService.exe"); 
    	else 
    		WriteLogFile("Success to taskkill ResourceManagerService.exe");
    	endif;   
   		ServiceRemoveService( "ResourceManager"  );
   	else
   	    WriteLogFile("There is no ResourceManager");
   	endif;
end;  

function DoInstallRabbitMQServices()
number nResult;
begin   	          
    WriteLogFile("Begin to install services RabbitMQ");          
   		//nResult = RunApplication(SUPPORTDIR ^ "RabbitMQ_management_plugins.bat",svRabbitMQInstalldir,FALSE,TRUE,TRUE );
   		//CopyFileToDes(SUPPORTDIR^".erlang.cookie",WindowsFolder^".erlang.cookie");
   		//CopyFileToDes(SUPPORTDIR^".erlang.cookie","C:\\Users\\Administrator\\.erlang.cookie");
   		if (svrabbitmqssl = "true") then
   		//change "\" to "/" in rabbitMqCertCaPath,rabbitMqCertPath,rabbitMqPrivateKey
   		StrReplace(rabbitMqCertCaPath,"\\","\/",0);
   		StrReplace(rabbitMqCertPath,"\\","\/",0);
   		StrReplace(rabbitMqPrivateKey,"\\","\/",0);
   		WriteLogFile("The rabbitMqCertCaPath in rabbitmq.config is: "+rabbitMqCertCaPath);
   		WriteLogFile("The rabbitMqCertPath in rabbitmq.config is: "+rabbitMqCertPath);
   		WriteLogFile("The rabbitMqPrivateKey in rabbitmq.config is: "+rabbitMqPrivateKey);
   		nResult = RunApplication(SUPPORTDIR ^ "1.RMQ_config_SSL.bat","\"" + svRabbitMQInstalldir+"\""+" \"" + ERLANG_VERSION+"\""+" \"" + rabbitMqLocalPort +"\""+" \"" + rabbitMqCertCaPath +"\""+" \"" + rabbitMqCertPath +"\""+" \"" + rabbitMqPrivateKey +"\"",FALSE,TRUE,TRUE );
   		else
   		nResult = RunApplication(SUPPORTDIR ^ "1.RMQ_config.bat","\"" + svRabbitMQInstalldir+"\""+" \"" + ERLANG_VERSION+"\""+" \"" + rabbitMqLocalPort +"\"",FALSE,TRUE,TRUE );
   		endif;
   		if (nResult!=0) then
   		WriteLogFile("Fail to set RabbitMQ config"); 
   		MessageBox("Fail to set RabbitMQ config, the installation will abort.",SEVERE); 
   		abort;
   		endif;
   		nResult = RunApplication(SUPPORTDIR ^ "2.RMQ_service.bat","\"" + svRabbitMQInstalldir+"\""+" \"" + ERLANG_VERSION+"\"",FALSE,TRUE,TRUE );
   		if (nResult!=0) then
   		WriteLogFile("Fail to install RabbitMQ service");
   		MessageBox("Fail to install RabbitMQ service, the installation will abort.",SEVERE); 
   		abort;
   		endif;
   		nResult = RunApplication(SUPPORTDIR ^ "3.RMQ_plugin.bat","\"" + svRabbitMQInstalldir+"\""+" \"" + ERLANG_VERSION+"\"",FALSE,TRUE,TRUE );
   		if (nResult!=0) then
   		WriteLogFile("Fail to enable RabbitMQ plugin"); 
   		MessageBox("Fail to enable RabbitMQ plugin, the installation will abort.",SEVERE); 
   		abort;
   		endif;
   		nResult = RunApplication(SUPPORTDIR ^ "4.RMQ_restart.bat","\"" + svRabbitMQInstalldir+"\""+" \"" + ERLANG_VERSION+"\"",FALSE,TRUE,TRUE );
   		if (nResult!=0) then
   		WriteLogFile("Fail to restart RabbitMQ"); 
   		MessageBox("Fail to restart RabbitMQ, the installation will abort.",SEVERE); 
   		abort;
   		endif;
   		nResult = RunApplication(SUPPORTDIR ^ "5.RMQ_policy.bat","\"" + svRabbitMQInstalldir+"\""+" \"" + ERLANG_VERSION+"\"",FALSE,TRUE,TRUE );
   		if (nResult!=0) then
   		WriteLogFile("Fail to set RabbitMQ policy"); 
   		MessageBox("Fail to set RabbitMQ policy, the installation will abort.",SEVERE); 
   		abort;
   		endif;   		   		
    	WriteLogFile("Success to install services RabbitMQ");    
end;   

function DoUninstallRabbitMQServices()
number nResult,nvResult;
begin
    if ( ServiceExistsService ( "RabbitMQ" )) then 
   		ServiceGetServiceState ("RabbitMQ" , nvResult );
	     if ( nvResult=SERVICE_STOPPED )   then
         	WriteLogFile("The NetBrain RabbitMQ Service has been stopped.");
         else
			ServiceStopService ( "RabbitMQ"  ); 
         endif;
         //uninstall ERLANG FIRST
        nResult = RunApplication("taskkill" , "/F /IM erl.exe /T", FALSE,TRUE,TRUE );
        if (nResult!=0) then
    		WriteLogFile("Fail to taskkill erl.exe"); 
    	else 
    		WriteLogFile("Success to taskkill erl.exe");
    	endif; 
    	//nResult = RunApplication("taskkill" , "/F /IM epmd.exe /T", FALSE,TRUE,TRUE );
    	nResult = RunApplication(SUPPORTDIR^"killepmd.bat",ERLANG_VERSION, FALSE,TRUE,TRUE );
        if (nResult!=0) then
    		WriteLogFile("Fail to taskkill epmd.exe"); 
    	else 
    		WriteLogFile("Success to taskkill epmd.exe");
    	endif;
    	ServiceRemoveService( "RabbitMQ"  );
    	nResult = RunApplication(SUPPORTDIR^"uninstallERLANG.bat",ERLANG_VERSION, FALSE,TRUE,TRUE );
        if (nResult!=0) then
    		WriteLogFile("Fail to uninstall ERLANG"); 
    	else 
    		WriteLogFile("Success to uninstall ERLANG");
    	endif;  
        //delete environment variable of ERLANG
        RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
        RegDBDeleteKey(ERLANG_REG); 
        //delete cookie of ERLANG
        DeleteFile(COOKIEFILE);
        DeleteFile("C:\\Windows"^COOKIEFILE_NAME);
   		//ServiceRemoveService( "RabbitMQ"  );
   		//delete install dir of ERLANG
   		//nResult = RunApplication("taskkill" , "/F /IM epmd.exe /T", FALSE,TRUE,TRUE );
   		nResult = RunApplication("taskkill" , "/F /IM erl.exe /T", FALSE,TRUE,TRUE );
        if (nResult!=0) then
    		WriteLogFile("Fail to taskkill erl.exe"); 
    	else 
    		WriteLogFile("Success to taskkill erl.exe");
    	endif; 
   		nResult = RunApplication(SUPPORTDIR^"killepmd.bat",ERLANG_VERSION, FALSE,TRUE,TRUE );
        if (nResult!=0) then
    		WriteLogFile("Fail to taskkill epmd.exe"); 
    	else 
    		WriteLogFile("Success to taskkill epmd.exe");
    	endif;
    	//DeleteFolder("C:\Program Files\erl7.2.1");
    	WriteLogFile("C:\\Program Files\\erl"+ERLANG_VERSION);
    	DeleteFolder("C:\\Program Files\\erl"+ERLANG_VERSION);
   		//delete environment variable of RabbitMQ(64bit programme)
   		REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;
   	    RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
        RegDBDeleteKey(RABBITMQ_REG); 
        REGDB_OPTIONS = REGDB_OPTION_USE_DEFAULT_OPTIONS; 
   	else
   	    WriteLogFile("There is no RabbitMQ");
   	endif;
end;  

function FormatVer(szVer,svVer) 
	LIST   listID;  
	NUMBER nvNum,iCount; 
	NUMBER nvReturn;
begin	
	listID = ListCreate (STRINGLIST);
	if (listID = LIST_NULL) then 
		return -1;
	endif; 
	
	nvReturn = StrGetTokens (listID, szVer, ".");
	
	if ( nvReturn = 0 ) then   
		nvNum = ListCount (listID);
		ListSetIndex (listID, LISTLAST);
		 
		for iCount = nvNum to 4-1  
			ListAddString (listID,"0",AFTER); 
		endfor;  
		
		nvReturn = StrPutTokens (listID,svVer,".",FALSE);
	endif;
	
	ListDestroy (listID);
    
    return nvReturn;
    	
end; 

function CopyFileToDes(szSourcefile,szDestfile)
    NUMBER nResult; 
begin 
	Disable(LOGGING);
    WriteLogFile ("Copy "+szSourcefile+" to "+szDestfile);
    
    nResult = CopyFile(szSourcefile, szDestfile); 
    
    // Report the results of the copy operation. 
    switch (nResult) 
        case 0: 
            WriteLogFile ("Files successfully copied."); 
        case COPY_ERR_CREATEDIR: 
            WriteLogFile ("A target directory could not be created."); 
        case COPY_ERR_MEMORY: 
            WriteLogFile ("Insufficient memory."); 
        case COPY_ERR_NODISKSPACE: 
            WriteLogFile ("Insufficint disk space.");
        case COPY_ERR_OPENINPUT: 
            WriteLogFile ("Unable to open the input files in "+ szSourcefile); 
        case COPY_ERR_OPENOUTPUT: 
            WriteLogFile ("Unable to copy the source files."); 
        case COPY_ERR_TARGETREADONLY: 
            WriteLogFile ("A target file already exists and cannot be overwritten."); 
        default:
            WriteLogFile ("An unspecified error occurred. "+FormatMessage(nResult)); 
    endswitch;  
    Enable(LOGGING);
end;

function WriteCookieFile( svContent )   
 	NUMBER   FileHandle;   
	NUMBER   nResult;
	STRING	 svResult;
begin           
	nResult = FindFile ( COOKIEFILE_PATH,  COOKIEFILE_NAME, svResult ); 
	
	OpenFileMode (FILE_MODE_APPEND);  
	if( nResult < 0 ) then
		nResult = CreateFile(FileHandle, COOKIEFILE_PATH,  COOKIEFILE_NAME );  
	else
	    DeleteFile(COOKIEFILE);
	    nResult = CreateFile(FileHandle, COOKIEFILE_PATH,  COOKIEFILE_NAME );  
		nResult = OpenFile(FileHandle, COOKIEFILE_PATH,  COOKIEFILE_NAME );  
	endif;
	
	if( nResult < 0 ) then  
		return -1;
	endif; 
  
    nResult = WriteLine(FileHandle,svContent);     
    CloseFile(FileHandle);    
    return 0;
end; 


function NUMBER checkIPAddress( svIP )
 NUMBER n;
 begin
 RegDBDisConnectRegistry( 0 ); // in case it's already open
 n = RegDBConnectRegistry ( svIP, HKEY_LOCAL_MACHINE, 0 );
 RegDBDisConnectRegistry( 0 );
 return n;
 end;
 
// SdMongoDB -------------------------------------------------------------
function  SdMongoDB()
    string  szDlg, svString, szTemp;
    number  nId, nSdMongoDB, nResult, nCount, nTemp;
    HWND    hwndDlg;
    BOOL    bDone;
    LIST    servers;
begin

    szDlg = "SdMongoDB";

    // record data produced by this dialog
    if (MODE=SILENTMODE) then
        SdMakeName(szAppKey, szDlg, "", nSdMongoDB);
        SilentReadData(szAppKey, "Result", DATA_NUMBER, szTemp, nId); 
        if ((nId != BACK) && (nId != CANCEL)) then
			SilentReadData(szAppKey, "MongoDbReplicaSetName", DATA_STRING, replicaSetName, nTemp); 
			SilentReadData(szAppKey, "MongoDbUsername", DATA_STRING, mongodbusername, nTemp); 
			SilentReadData(szAppKey, "MongoDbPassword", DATA_STRING, mongodbpassword, nTemp); 
			SilentReadData(szAppKey, "MongoDbServersCount", DATA_NUMBER, szTemp, nCount); 

			if (nCount > 0) then
				ListDeleteAll(listServers);
				nTemp = 1;
				while (nTemp <= nCount) 
					Sprintf(szTemp, "MongoDbServer%d", nTemp);
					SilentReadData(szAppKey, szTemp, DATA_STRING, svString, nSdMongoDB); 
					ListAddString(listServers, svString, AFTER);
					nTemp++;
				endwhile;
			endif;
	    endif;
	    return nId;        
    endif;
    
    // ensure general initialization is complete
    if ( !bSdInit ) then
        SdInit( );
    endif;

    if (EzDefineDialog( szDlg, ISUSER, szDlg, 0 ) = DLG_ERR) then
	        return -1;
    endif;

    // Loop in dialog until the user selects a standard button
    bDone = FALSE;

    while (!bDone)

        nId = WaitOnDialog( szDlg );
 
        switch (nId)
    
        case DLG_INIT:
            hwndDlg = CmdGetHwndDlg( szDlg );
            SdGeneralInit( szDlg, hwndDlg, STYLE_BOLD, szSdProduct );

			CtrlSetMLEText( szDlg, 1315, listServers );
			CtrlSetText( szDlg, 1310, replicaSetName );
			CtrlSetText( szDlg, 1311, mongodbusername );
			CtrlSetText( szDlg, 1312, mongodbpassword );
			CtrlSetState( szDlg, 1313, mongodbssl );

        case SD_PBUT_OK:

            nId   = OK;
            bDone = TRUE;

        case BACK:
            nId    = BACK;
            bDone  = TRUE;

        case DLG_ERR:
            SdError( -1, szDlg );
            nId   = -1;
            bDone = TRUE;

        case DLG_CLOSE:

            SdCloseDlg( hwndDlg, nId, bDone );

        default:
            // check standard handling
            if(SdIsStdButton( nId ) && SdDoStdButton( nId )) then
                bDone = TRUE;
            endif;
     
        endswitch;

    endwhile;

	CtrlGetText( szDlg, 1310, replicaSetName );
	CtrlGetText( szDlg, 1311, mongodbusername );
	CtrlGetText( szDlg, 1312, mongodbpassword );
	mongodbssl = CtrlGetState(szDlg, 1313);
	ListDeleteAll(listServers);
	CtrlGetMLEText (szDlg, 1315, listServers);

    EndDialog( szDlg );
    ReleaseDialog( szDlg );
    SdUnInit();

	// record data produced by this dialog
    if (MODE=RECORDMODE) then
        SdMakeName(szAppKey, szDlg, "", nSdMongoDB);
        SilentWriteData(szAppKey, "MongoDbReplicaSetName", DATA_STRING, replicaSetName, 0); 
        SilentWriteData(szAppKey, "MongoDbUsername", DATA_STRING, mongodbusername, 0); 
        SilentWriteData(szAppKey, "MongoDbPassword", DATA_STRING, mongodbpassword, 0); 

        nCount = ListCount(listServers);
        SilentWriteData(szAppKey, "MongoDbServersCount", DATA_NUMBER, "", nCount); 

        if (nCount > 0) then
            nCount = 1;
			nResult = ListGetFirstString(listServers, svString);
			while (nResult != END_OF_LIST)
				StrTrim(svString);
				if (svString != "") then 
                    Sprintf(szTemp, "MongoDbServer%d", nCount);
                    SilentWriteData(szAppKey, szTemp, DATA_STRING, svString, 0); 
				endif; 
				nResult = ListGetNextString(listServers, svString);
				nCount++;
			endwhile;
        endif;
        
        SilentWriteData(szAppKey, "Result", DATA_NUMBER, "", nId); 
    endif;
	
    return nId;

end;  

// SdRabbitMQ -------------------------------------------------------------
function  SdRabbitMQ()
    string  szDlg, szFile[512], szTemp;
    number  nId, nResult, nSdRabbitMQ, nTemp;
    HWND    hwndDlg, hwndButton;
    BOOL    bDone;
    LIST   servers, listFiles;
begin

    szDlg = "SdRabbitMQ";
    
    // record data produced by this dialog
    if (MODE=SILENTMODE) then
        SdMakeName(szAppKey, szDlg, "", nSdRabbitMQ);
        SilentReadData(szAppKey, "Result", DATA_NUMBER, szTemp, nId); 
        
        if ((nId != BACK) && (nId != CANCEL)) then
			SilentReadData(szAppKey, "RabbitMqUsername", DATA_STRING, rabbitMqUsername, nTemp); 
			SilentReadData(szAppKey, "RabbitMqPassword", DATA_STRING, rabbitMqPassword, nTemp); 
			SilentReadData(szAppKey, "RabbitMqLocalPort", DATA_STRING, rabbitMqLocalPort, nTemp); 
			SilentReadData(szAppKey, "RabbitMqClusterPort", DATA_STRING, rabbitMqClusterPort, nTemp); 
			SilentReadData(szAppKey, "RabbitMqEmpdPort", DATA_STRING, rabbitMqEmpdPort, nTemp); 
			SilentReadData(szAppKey, "RabbitMqClusterId", DATA_STRING, rabbitMqClusterId, nTemp); 
			SilentReadData(szAppKey, "RabbitMqCertCaPath", DATA_STRING, rabbitMqCertCaPath, nTemp); 
			SilentReadData(szAppKey, "RabbitMqCertPath", DATA_STRING, rabbitMqCertPath, nTemp); 
			SilentReadData(szAppKey, "RabbitMqPrivateKey", DATA_STRING, rabbitMqPrivateKey, nTemp); 
			SilentReadData(szAppKey, "RabbitMqTlsVersion", DATA_STRING, rabbitMqTlsVersion, nTemp); 
	    endif;
	    return nId;        
    endif;

    // ensure general initialization is complete
    if ( !bSdInit ) then
        SdInit( );
    endif;

    if (EzDefineDialog( szDlg, ISUSER, szDlg, 0 ) = DLG_ERR) then
	        return -1;
    endif;

    // Loop in dialog until the user selects a standard button
    bDone = FALSE;

    while (!bDone)

        nId = WaitOnDialog( szDlg );
 
        switch (nId)
    
        case DLG_INIT:
            hwndDlg = CmdGetHwndDlg( szDlg );
            SdGeneralInit( szDlg, hwndDlg, STYLE_BOLD, szSdProduct );
        
			CtrlSetText( szDlg, 1306, rabbitMqUsername );
			CtrlSetText( szDlg, 1308, rabbitMqPassword );
			CtrlSetText( szDlg, 1310, rabbitMqLocalPort );
			CtrlSetText( szDlg, 1312, rabbitMqClusterPort );
			CtrlSetText( szDlg, 1314, rabbitMqEmpdPort );
			CtrlSetText( szDlg, 1316, rabbitMqClusterId );
			CtrlSetText( szDlg, 1334, rabbitMqCertCaPath );
			CtrlSetText( szDlg, 1320, rabbitMqCertPath );
			CtrlSetText( szDlg, 1323, rabbitMqPrivateKey );
			CtrlSetState( szDlg, 1318, rabbitMqSsl );
			CtrlSetList( szDlg, 1326, rabbitMqTlsVersions );
			CtrlSetCurSel ( szDlg, 1326, rabbitMqTlsVersion );
			//CtrlSetMLEText( szDlg, 1328, rabbitMqServers );
			
			rabbitMqSsl = CtrlGetState(szDlg, 1318);
        	if (rabbitMqSsl == BUTTON_CHECKED) then
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1326 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1334 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1320 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1323 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1335 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1321 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1324 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
        	elseif (rabbitMqSsl == BUTTON_UNCHECKED) then
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1326 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1334 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1320 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1323 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1335 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1321 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1324 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
        	endif;

        case 1318:
        	rabbitMqSsl = CtrlGetState(szDlg, 1318);
        	if (rabbitMqSsl == BUTTON_CHECKED) then
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1326 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1334 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1320 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1323 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1335 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1321 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1324 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, TRUE );
                endif;
        	elseif (rabbitMqSsl == BUTTON_UNCHECKED) then
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1326 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1334 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1320 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1323 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1335 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1321 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
                hwndButton = CtrlGetDlgItem(szDlg, 0, 1324 );
                if(IsWindow( hwndButton )) then
                    EnableWindow( hwndButton, FALSE );
                endif;
        	endif;

        case 1321:
			nResult = FileBrowseDlg(rabbitMqCertPath, "All files (*.*)", "Select File", SRCDISK);
			CtrlSetText(szDlg, 1320, rabbitMqCertPath);

        case 1324:
			nResult = FileBrowseDlg( rabbitMqPrivateKey, "All files (*.*)", "Select File", SRCDISK);
			CtrlSetText(szDlg, 1323, rabbitMqPrivateKey);

        case 1335:
			nResult = FileBrowseDlg(rabbitMqCertCaPath, "All files (*.*)", "Select File", SRCDISK);
			CtrlSetText( szDlg, 1334, rabbitMqCertCaPath );
            
        case SD_PBUT_OK:

            nId   = OK;
            bDone = TRUE;

        case BACK:
            nId    = BACK;
            bDone  = TRUE;

        case DLG_ERR:
            SdError( -1, szDlg );
            nId   = -1;
            bDone = TRUE;

        case DLG_CLOSE:

            SdCloseDlg( hwndDlg, nId, bDone );

        default:
            // check standard handling
            if(SdIsStdButton( nId ) && SdDoStdButton( nId )) then
                bDone = TRUE;
            endif;
     
        endswitch;

    endwhile;


	CtrlGetText( szDlg, 1306, rabbitMqUsername );
	CtrlGetText( szDlg, 1308, rabbitMqPassword );
	CtrlGetText( szDlg, 1310, rabbitMqLocalPort );
	CtrlGetText( szDlg, 1312, rabbitMqClusterPort );
	CtrlGetText( szDlg, 1314, rabbitMqEmpdPort );
	CtrlGetText( szDlg, 1316, rabbitMqClusterId );
	CtrlGetText( szDlg, 1334, rabbitMqCertCaPath );
	CtrlGetText( szDlg, 1320, rabbitMqCertPath );
	CtrlGetText( szDlg, 1323, rabbitMqPrivateKey );
	CtrlGetCurSel(szDlg, 1326, rabbitMqTlsVersion );
	rabbitMqSsl = CtrlGetState(szDlg, 1318);
	//ListDeleteAll(rabbitMqServers);
	//CtrlGetMLEText (szDlg, 1328, rabbitMqServers);

    EndDialog( szDlg );
    ReleaseDialog( szDlg );
    SdUnInit();

	// record data produced by this dialog
    if (MODE=RECORDMODE) then
        SdMakeName(szAppKey, szDlg, "", nSdRabbitMQ);
        SilentWriteData(szAppKey, "RabbitMqUsername", DATA_STRING, rabbitMqUsername, 0); 
        SilentWriteData(szAppKey, "RabbitMqPassword", DATA_STRING, rabbitMqPassword, 0); 
        SilentWriteData(szAppKey, "RabbitMqLocalPort", DATA_STRING, rabbitMqLocalPort, 0); 
        SilentWriteData(szAppKey, "RabbitMqClusterPort", DATA_STRING, rabbitMqClusterPort, 0); 
        SilentWriteData(szAppKey, "RabbitMqEmpdPort", DATA_STRING, rabbitMqEmpdPort, 0); 
        SilentWriteData(szAppKey, "RabbitMqClusterId", DATA_STRING, rabbitMqClusterId, 0); 
        SilentWriteData(szAppKey, "RabbitMqCertCaPath", DATA_STRING, rabbitMqCertCaPath, 0); 
        SilentWriteData(szAppKey, "RabbitMqCertPath", DATA_STRING, rabbitMqCertPath, 0); 
        SilentWriteData(szAppKey, "RabbitMqPrivateKey", DATA_STRING, rabbitMqPrivateKey, 0); 
        SilentWriteData(szAppKey, "RabbitMqTlsVersion", DATA_STRING, rabbitMqTlsVersion, 0); 
        SilentWriteData(szAppKey, "Result", DATA_NUMBER, "", nId); 
    endif;

    return nId;

end;  

function FileBrowseDlg( szFile, szFilter, szDialogTitle, szInitialDir)

	OPENFILENAME ofn;
	STRING szMsg, szFileTitle[260];
	STRING szCustomFilter[260], szTemp[260];
	LONG   nLen, nCount, nResult, n, nFlags, nErr;
	STR260 str;

begin

	nLen = StrLength( szFilter );
	nLen = nLen - 1;
	nCount = 0;
	for nCount = 0 to nLen
		if ( szFilter[nCount] = '|' ) then
			szFilter[nCount] = '\0';
		endif;
	endfor;
	
  	UseDLL(WINSYSDIR ^ "comdlg32.dll");
  	
  	nFlags = OFN_FILEMUSTEXIST | OFN_PATHMUSTEXIST | OFN_HIDEREADONLY
  			 | OFN_NOCHANGEDIR | OFN_EXPLORER;

  	nResult = GetWindowHandle(HWND_INSTALL);
	str.sz = szFile;
 	
  	ofn.lStructSize = SizeOf(ofn);
  	ofn.hwndOwner = nResult;
  	ofn.lpstrFile = &str;
  	ofn.nMaxFile = SizeOf(str);
  	ofn.lpstrFilter = &szFilter;
  	ofn.nFilterIndex = 1;
  	ofn.lpstrFileTitle = &szFileTitle;
  	ofn.nMaxFileTitle = 260;
  	ofn.lpstrTitle = &szDialogTitle;
  	ofn.Flags = nFlags;
  	ofn.lpstrDefExt = &szTemp;
  	ofn.lpstrInitialDir = &szInitialDir;
  	ofn.hInstance = 0;
  	ofn.lpstrCustomFilter = &szCustomFilter;
  	ofn.nMaxCustFilter = 260;
  	ofn.lpfnHook = 0;
  	
  	nResult = GetOpenFileNameA(&ofn);
  	if nResult = 1 then  	
		szFile = str.sz;
  	else
  		return -1;
  	endif;
  	
  	UnUseDLL(WINSYSDIR ^ "comdlg32.dll");
  	
  	return 0;  	
end;

// SdRabbitMQServers -------------------------------------------------------------
function  SdRabbitMQServers()
    string  szDlg, svString, szTemp;
    number  nId, nRabbitMQServers, nCount, nTemp;
    HWND    hwndDlg;
    BOOL    bDone;
    //LIST   servers;
begin

    szDlg = "SdRabbitMQServers";

    // record data produced by this dialog
    if (MODE=SILENTMODE) then
        SdMakeName(szAppKey, szDlg, "", nRabbitMQServers);
        SilentReadData(szAppKey, "Result", DATA_NUMBER, szTemp, nId); 
        if ((nId != BACK) && (nId != CANCEL)) then
            SilentReadData(szAppKey, "RabbitMqServersCount", DATA_NUMBER, szTemp, nCount); 
			if (nCount > 0) then
				ListDeleteAll(rabbitMqServers);
				nTemp = 1;
				while (nTemp <= nCount) 
					Sprintf(szTemp, "RabbitMqServers%d", nTemp);
					SilentReadData(szAppKey, szTemp, DATA_STRING, svString, nRabbitMQServers); 
					ListAddString(rabbitMqServers, svString, AFTER);
					nTemp++;
				endwhile;
			endif;
	    endif;
	    return nId;        
    endif;

    // ensure general initialization is complete
    if ( !bSdInit ) then
        SdInit( );
    endif;

    if (EzDefineDialog( szDlg, ISUSER, szDlg, 0 ) = DLG_ERR) then
	        return -1;
    endif;

    // Loop in dialog until the user selects a standard button
    bDone = FALSE;

    while (!bDone)

        nId = WaitOnDialog( szDlg );
 
        switch (nId)
    
        case DLG_INIT:
            hwndDlg = CmdGetHwndDlg( szDlg );
            SdGeneralInit( szDlg, hwndDlg, STYLE_BOLD, szSdProduct );

			CtrlSetMLEText( szDlg, 1333, rabbitMqServers );


        case SD_PBUT_OK:

            nId   = OK;
            bDone = TRUE;

        case BACK:
            nId    = BACK;
            bDone  = TRUE;

        case DLG_ERR:
            SdError( -1, szDlg );
            nId   = -1;
            bDone = TRUE;

        case DLG_CLOSE:

            SdCloseDlg( hwndDlg, nId, bDone );

        default:
            // check standard handling
            if(SdIsStdButton( nId ) && SdDoStdButton( nId )) then
                bDone = TRUE;
            endif;
     
        endswitch;

    endwhile;

	ListDeleteAll(rabbitMqServers);
	CtrlGetMLEText (szDlg, 1333, rabbitMqServers);

    EndDialog( szDlg );
    ReleaseDialog( szDlg );
    SdUnInit();

	// record data produced by this dialog
    if (MODE=RECORDMODE) then
        SdMakeName(szAppKey, szDlg, "", nRabbitMQServers);

        nCount = ListCount(rabbitMqServers);
        SilentWriteData(szAppKey, "RabbitMqServersCount", DATA_NUMBER, "", nCount); 

        if (nCount > 0) then
            nCount = 1;
			nResult = ListGetFirstString (rabbitMqServers, svString);
			while (nResult != END_OF_LIST)
				StrTrim(svString);
				if (svString != "") then 
                    Sprintf(szTemp, "RabbitMqServers%d", nCount);
                    SilentWriteData(szAppKey, szTemp, DATA_STRING, svString, 0); 
				endif; 
				nResult = ListGetNextString(rabbitMqServers, svString);
				nCount++;
			endwhile;
        endif;
        
        SilentWriteData(szAppKey, "Result", DATA_NUMBER, "", nId); 
    endif;
	
    return nId;

end;

function ShowListContentFromTxt(svlisttitle,svlistmsg,listMongodbiniterror,svtxtpath,svtxtname)
	STRING  svLine;
    NUMBER  nvFileHandle;
begin 
	// Set the file mode to normal.

    OpenFileMode (FILE_MODE_NORMAL);

    // Open the text file.

    if (OpenFile (nvFileHandle, svtxtpath, svtxtname) < 0) then

        //MessageBox ("OpenFile failed.", SEVERE);

        //abort;
        WriteLogFile(svtxtpath+svtxtname+" can not be opened. ");

    endif;

    // Read lines from the text file into the string list.

    while GetLine (nvFileHandle, svLine) = 0

        ListAddString (listMongodbiniterror, svLine, AFTER);

    endwhile;

    // Close the file.

    if (CloseFile (nvFileHandle) < 0) then

        //MessageBox ("CloseFile failed.", SEVERE);
        WriteLogFile(svtxtpath+svtxtname+" can not be closed. ");

    endif;

 

    // Display the text that was read from the file.

    SdShowInfoList (svlisttitle,svlistmsg, listMongodbiniterror);

end;

function CheckPathSpecCharSlient(spathtocheck)
begin  
	//return (1);
	//#$%^&@~`!;',
	if(StrFind (spathtocheck, "#")>-1 ||StrFind (spathtocheck, "$")>-1 ||StrFind (spathtocheck, "%")>-1 ||StrFind (spathtocheck, "^")>-1 ||StrFind (spathtocheck, "&")>-1 ||StrFind (spathtocheck, "@")>-1||StrFind (spathtocheck, "~")>-1||StrFind (spathtocheck, "`")>-1||StrFind (spathtocheck, "!")>-1||StrFind (spathtocheck, ";")>-1||StrFind (spathtocheck, "'")>-1||StrFind (spathtocheck, ",")>-1)  then
		//MessageBox("The Path can not include any of the following characters: #$%^&@~`!;', ", SEVERE);
		return (0);                            
	endif; 
	return (1);
end; 

function WriteRegistryDump()
	NUMBER nvSize,nvType, nvReturn;
	STRING svTemp, svResult;
begin
    if(SYSINFO.bIsWow64) then 
    REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;
	nvType = REGDB_STRING; 
    nvSize = -1;  
    if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
   		RegDBSetKeyValueEx(REG_LOCALDUMPS,"DumpFolder",nvType,DUMP_PATH,nvSize);
   		RegDBSetKeyValueEx(REG_LOCALDUMPS,"DumpCount",REGDB_NUMBER,"10",nvSize);
   		RegDBSetKeyValueEx(REG_LOCALDUMPS,"DumpType",REGDB_NUMBER,"2",nvSize); 
   		RegDBSetKeyValueEx(REG_LOCALDUMPS,"CustomDumpFlags",REGDB_NUMBER,"0",nvSize);     		
    endif;
    endif;   
end;  

function DeleteRegistryDump()

begin
 if(SYSINFO.bIsWow64) then 
     REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;
	if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
    	RegDBDeleteKey (REG_LOCALDUMPS);
 	endif;
 endif;
end;

function WriteRegistryAMQPOptions()
	NUMBER nvSize,nvType, nvReturn;
	STRING svTemp, svResult;
begin
if(SYSINFO.bIsWow64) then 
    REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;
	nvType = REGDB_STRING; 
    nvSize = -1;  
    if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
    	RegDBSetKeyValueEx(REGROOT,REGKEY_AMQPTSL,nvType,svrabbitmqssl,nvSize);
        RegDBSetKeyValueEx(REGROOT,REGKEY_AMQPTSLVERSION,nvType,rabbitMqTlsVersion,nvSize);
        RegDBSetKeyValueEx(REGROOT,REGKEY_AMQPPORT,nvType,rabbitMqLocalPort,nvSize);                
    endif;
    REGDB_OPTIONS = REGDB_OPTIONS & ~REGDB_OPTION_WOW64_64KEY;
    endif;
end;   