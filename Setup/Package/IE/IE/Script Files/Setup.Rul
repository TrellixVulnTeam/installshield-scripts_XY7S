//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//				  create a new project via. step-by step instructions use the
//				  Project Assistant.
//
//===========================================================================

#define VIEWVERSION              "7.0.0"
#define FeatureDefault           "Default"
#define FeatureWorkerServer      "WorkerServer"
#define FeatureWorkerServerName  "Worker Server"
#define FeatureWebAPIService     "WebAPIService"
#define FeatureWebAPIServiceName "Web API Service"
#define FeatureWebServer         "WebServer"
#define FeatureWebServerName     "Web Server"
#define WSPRODUCTCODE            "{05C87FA5-F91B-4ECF-B676-316514C49230}"
#define DLLNAME                  SUPPORTDIR^"WriteVersion.dll"
#define DISKSPACE_M              1024
#define SETUPTYPE                "WorkerServer"

#define DEFAULTSITENAME       "Default Web Site"  
#define DEFAULTSITEINDEX      "1"  

#define REGROOT               "SOFTWARE\\NetBrain"
#define REGKEY_WORKERSERVER   "WorkerServer"  
#define REGKEY_WEBAPISERVICE  "WebAPIService"  
#define REGKEY_WEBSERVER      "WebServer"  
#define REGPATH_WORKERSERVER  "SOFTWARE\\NetBrain\\NetBrain Worker Server"
#define REGPATH_WEBAPISERVICE "SOFTWARE\\NetBrain\\NetBrain Web API Service"
#define REGPATH_WEBSERVER     "SOFTWARE\\NetBrain\\NetBrain Web Server"
#define REGKEY_UPGRADEDATA    "UpgradeData"
#define REG_LOCALDUMPS        "SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps"

#define MSG_ERRO_CHECK_ADMIN	 	   "You don't have enough privilege to continue the installation, please contact the administrator. If this is Windows 2008, maybe you need rerun the installation program by menu 'Run as administrator'."
#define MSG_ERR_PATH_FORMAT	 	       "The specified folder:\n'%s'\n is invalid,incomplete or write protected.Please type a full path with drive letter;for example'C:\\XXXX'."
#define DISKSPACENOTENOUGH             "There is not enough disk space(at least 1G )."
#define MSG_INFO_REPEAT_INSTALL        "The product of same version can not be installed on the same machine. The installation will abort."
#define MSG_INFO_32BIT_INSTALL         "The product is 64bit software, so it can not be installed under the folder of "+PROGRAMFILES+", please choose another one."
#define MSG_MONGODB_CONNECTION_STRING1 "Please according to the format to fill the connection string of mongodb replicaset.\n"
#define MSG_MONGODB_CONNECTION_STRING2 "The format is like:<ip>:<port>[,<ip>:<port>[...]]/?replicaSet=<replica set name>\n"
#define MSG_MONGODB_CONNECTION_STRING3 "The example is like:192.168.33.82:28101,192.168.33.83:28101,192.168.33.84:28101/?replicaSet=rs\n"
#define MSG_INFO_INSTALL_PYTHON        "Succeed to install Python."
#define INSTALLSTATUS                  "Please wait while the InstallShield Wizard installs NetBrain Integrated Edition."
#define MSG_ERR_PORT_INVALID           "The port: %s is in use, please enter another!"
#define MSG_ERR_DIR_EMPTY			   "The specified folder must be empty."
#define MSG_WARN_CHECK_EXTENDEDMEMORY  "The extended memory of your machine is less than 16GB, which may lead to installation failure or off-normal use. Do you want to continue the installation?"
#define MSG_ERR_IP_PORT_SPECCHAR       ", the format of string is wrong or contains some special characters. "
#define MSG_ERR_IP_CONNECTION          ", the IP address cannot be connected. "
#define MSG_ERR_NETFX45_NOTEXISTS      "Please install DotNetFrameWork45 at least in this machine first,then run NetBrain setup again."   
#define MSG_ERR_NEED_IIS 		       "Please install Internet Information Server(IIS) in this machine first, then run NetBrain setup again. \n( To install IIS, go to \n Control Panel >> Add or Remove Programs >> Add/Remove Window Components \n check \"Application Server\" box)."
#define MSG_ERR_NEED_IIS2008 	       "Please install Internet Information Server(IIS) in this machine first, then run NetBrain setup again. \n( To install IIS, go to \n My Computer >> right-click >> Manange >> Roles >> Add Roles >> Next >> \n check \"Webserver(IIS)\" box)."
#define MSG_ERR_NEED_IIS2012           "Please install Internet Information Server(IIS) in this machine first, then run NetBrain setup again. \n( To install IIS, go to \n Server Manager >> left-click >> Manange >> Add Roles and Features >> Next >> \n check \"Application Server(IIS)\" box)."
#define MSG_ERR_NEED_IISASPNET         "Failed to check IIS, please install ASP.NET feature in Application Server (IIS) and set startup type:auto. "
#define MSG_ERR_NEED_IISCommon         "Failed to check IIS, please reinstall Application Server (IIS)" //Common HTTP Features in 

STRING LOGFILE_PATH;
STRING LOGFILE_NAME;
STRING LOGFILE;
STRING DUMP_PATH;
STRING svFeatureWorkerServer, svFeatureWorkerServerInstalled;
STRING svFeatureWebAPIService, svFeatureWebAPIServiceInstalled;
STRING svFeatureWebServer, svFeatureWebServerInstalled;
STRING svCurrentVersion;
NUMBER nvInstallDataDir;
STRING svUserName,szCompany;
STRING svOSVer;
STRING svDataSetupTime;
STRING svTempVal;
STRING svDataDirRoot;
NUMBER nResult,nResult1;
HWND   hMutex;
STRING svamqpip,svamqpport,svmongodbip,svmongodbport,svmongodbrepicasetstring;
//mongodb input UI begin
STRING mongoDbReplicaSetName, mongoDbUsername, mongoDbPassword;
BOOL   mongoDbUseSsl;
LIST   mongoDbServers;
STRING mongodbsslstr,mongoprimarynodestr,svString,svMongodbprimaryIP,svMongodbprimaryPort;
STRING svMongodbinitInstalldir;
//mongodb input UI end
//RabbitMQ input UI begin
STRING rabbitMqUsername, rabbitMqPassword, rabbitMqLocalPort;
BOOL   rabbitMqUseSsl;
LIST   rabbitMqServers;
STRING svrabbitmqssl;
//RabbitMQ input UI end
//Redis input UI begin
STRING redisPassword, redisLocalPort, redisPort, stunnelPort, redisServer;
BOOL   redisUseSsl;
//Redis input UI end
//Certificate input UI begin
STRING caPath;
BOOL   ignoreCa;
BOOL   nvCheckDeleteAllData;
//Certificate input UI end
//WebAPIService
STRING webAPIServerUrl;

STRING svWorkerServerInstalldir, svWebServerInstalldir;
STRING svWSSInstalldir,	svWSCInstalldir; 

STRING svDefaultSiteIP,	svDefaultSitePort, svDefaultSiteName;
STRING svWSSHost, svWSSSiteIndex, svWSSSiteName;
STRING svWSSDBusername, svWSSDBpwd;
STRING svWSSAppPool, svWSSVdir, svWSSDisableFolderList;
STRING svWSCHost, svWSCSiteIndex, svWSCSiteName;
STRING svWSCDBusername, svWSCDBpwd;
STRING svWSCAppPool, svWSCVdir, svWSCDisableFolderList;

NUMBER nLocation;
STRING svinitdata,svupgradedata;
STRING svFileName;
LIST   listDirs,listData;
STRING szAdminPrivilege;
LIST   listMongodbiniterror;
NUMBER nResultRabbitMQ,nResultMongodb;
STRING svrabbitmqip,svrabbitmqport;
STRING svrabbitmqtlsversion;
//STRING szdumppath;

// Included header files ----------------------------------------------------
#include "ifx.h"
#include "Util.Rul"
#include "FeatureEvents.Rul"
#include "Dialogs.Rul"

//---------------------------------------------------------------------------
// OnFilterComponents
//
// The OnFilterComponents event is called by the framework to filter out
// components in each feature by language and platform, override this
// event to perform custom filtering.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFilterComponents()
	STRING svReturn, stDateTime;
	STRING szDotNetFrameWork, szASPDotNet, szDrive, szVersion;
	NUMBER nvReturn, nvBufferSize;
begin 
	// init logfile begin
	LOGFILE_PATH = "c:\\";
	StrSub(szDrive, WINDIR, 0, 3);

	if( REMOVEONLY ) then
		LOGFILE_NAME="nb_ie_uninstall.log";
	else
		LOGFILE_NAME="nb_ie_install.log";
	endif; 	

	LOGFILE = szDrive ^ LOGFILE_NAME; 
	DeleteLogFile();
	// init logfile end
	
	DUMP_PATH = szDrive + "CrashDumps";

	// General information
	nvBufferSize = 32;
	MsiGetProperty(ISMSI_HANDLE, "ProductVersion", szVersion, nvBufferSize);
	WriteLogFile("NetBrain Integrated Edition, version " + szVersion + ".");
	
	//admin
	if(!SYSINFO.WINNT.bAdmin_Logged_On) then
		szAdminPrivilege = "Privileges : You don't have enough privilege to continue the installation, please contact the administrator. Maybe you need rerun the installation program by menu 'Run as administrator'.";
		MessageBox(szAdminPrivilege,WARNING);
		WriteLogFile(szAdminPrivilege);
		abort;
	endif;

	// Check .net framework 4.5
	nvReturn = Checkdotnetframework45();

	if(nvReturn = 0) then
		szDotNetFrameWork = MSG_ERR_NETFX45_NOTEXISTS;
		MessageBox(szDotNetFrameWork,WARNING);
		WriteLogFile(szDotNetFrameWork);
		abort;
	endif;

	// Filter file groups by current platform.
	FeatureFilterOS(MEDIA, 0, ISOSL_ALL, TRUE);
	FeatureFilterOS(MEDIA, 0, SYSINFO.nISOSL, FALSE);

	// Filter file groups by current language.
	FeatureFilterLanguage(MEDIA, ISLANG_ALL, TRUE);
	FeatureFilterLanguage(MEDIA, STANDARD_SELECTED_LANGUAGE, FALSE);
	WriteLogFile("SETUP OnFilterComponents Normal");
end;


//---------------------------------------------------------------------------
// OnBegin
//
// The OnBegin event is called directly by the framework after the setup
// initializes.
//---------------------------------------------------------------------------
function OnBegin()
	NUMBER nvType, nvSize;
begin
	// Check if another installer is running.
	hMutex = OpenMutexA(READ_CONTROL, FALSE, "NetBrain_RMInstaller");

	if (hMutex) then
		CloseHandle(hMutex);
		MessageBox("The installer is already running.", SEVERE);
		abort;
	else
		hMutex = CreateMutexA(NULL, FALSE, "NetBrain_RMInstaller");
	endif;

	DialogSetInfo(DLG_INFO_ALTIMAGE, SUPPORTDIR ^ "setup_top.bmp", TRUE);

	svFeatureWorkerServer = "0";
	svFeatureWebAPIService = "0";
	svFeatureWebServer = "0";
	svCurrentVersion = "";

	nvInstallDataDir = 1;
	redisLocalPort = "6379";
	redisPort = "6379";
	stunnelPort = "7000";

	svmongodbip="127.0.0.1";
	svmongodbport="21100";
	svmongodbrepicasetstring="192.168.33.82:28101,192.168.33.83:28101,192.168.33.84:28101/?replicaSet=rs";

	mongoDbServers = ListCreate( STRINGLIST );
	rabbitMqServers = ListCreate( STRINGLIST );
				
	svWorkerServerInstalldir = INSTALLDIR^"Worker Server";
	svWebServerInstalldir = INSTALLDIR^"Web Server";
	svMongodbinitInstalldir = INSTALLDIR^"Mongodbinit";
	svWSSInstalldir = svWebServerInstalldir^"nb_publish_server";
	svWSCInstalldir = svWebServerInstalldir^"nb_publish_client"; 

	if (MAINTENANCE) then 
		if(SYSINFO.bIsWow64) then 
			REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;
			nvType = REGDB_STRING; 
			nvSize = -1;  
	
			if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
				RegDBGetKeyValueEx(REGROOT, REGKEY_WORKERSERVER, nvType, svFeatureWorkerServer, nvSize);
				RegDBGetKeyValueEx(REGROOT, REGKEY_WEBAPISERVICE, nvType, svFeatureWebAPIService, nvSize);
				RegDBGetKeyValueEx(REGROOT, REGKEY_WEBSERVER, nvType, svFeatureWebServer, nvSize);
			endif;

			REGDB_OPTIONS = REGDB_OPTIONS & ~REGDB_OPTION_WOW64_64KEY;
		endif;
	endif;

	rabbitMqUsername = "";
	rabbitMqPassword = "";
	rabbitMqLocalPort = "5672";
	rabbitMqUseSsl = BUTTON_UNCHECKED;
	redisUseSsl = BUTTON_UNCHECKED;
	mongoDbUseSsl = BUTTON_UNCHECKED;

	if (ExistsDir(DUMP_PATH) != EXISTS) then
		if (CreateDir(DUMP_PATH) < 0) then
			WriteLogFile("Unable to create directory: " + DUMP_PATH);
		else
			WriteLogFile("DUMP_PATH:"+DUMP_PATH);
		endif;
	endif;

	ignoreCa = BUTTON_UNCHECKED;

	ServiceStopService( "W3SVC" );
	DialogSetInfo(DLG_INFO_ALTIMAGE, SUPPORTDIR ^ "setup_top.bmp", TRUE); 

	svDefaultSiteIP = "localhost";   
	svDefaultSitePort = "80"; 
	svDefaultSiteName = "Default Web Site";

	svWSSHost="127.0.0.1";
	svWSSSiteIndex=DEFAULTSITEINDEX;
	svWSSSiteName=DEFAULTSITENAME;

	svWSSDBusername="mongodb";
	svWSSDBpwd="mongodb";

	svWSSAppPool="ServicesAPI";
	svWSSVdir="ServicesAPI";
	svWSSDisableFolderList="";

	svWSCHost="127.0.0.1";
	svWSCSiteIndex=DEFAULTSITEINDEX;
	svWSCSiteName=DEFAULTSITENAME;

	svWSCDBusername="mongodb";
	svWSCDBpwd="mongodb";

	svWSCAppPool= "netbrain";
	svWSCVdir = ""; 
	svWSCDisableFolderList="";

	GetIIS78Configs();

	svWSSSiteName = svDefaultSiteName;
	svWSCSiteName = svDefaultSiteName; 

end;

//---------------------------------------------------------------------------
// OnFirstUIBefore
//
// The OnFirstUIBefore event is called by the framework when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    NUMBER nResult, nSetupType, nvSize, nUser;
    STRING szTitle, szMsg, szQuestion, svName, svCompany, szFile;
    STRING szLicenseFile;
	BOOL bCustom, bIgnore1, bIgnore2;
	NUMBER  bLicenseAccepted;    	 		  //SdLicense variable
    LIST    listData,listInfo;            	  //SdStartCopy and SdShowInfoList variable
    NUMBER  listID,ServicePackID;             //SdShowInfoList variable
    NUMBER  nvReturn1,nvReturn2;	          //SdShowInfoList variable
    STRING  svReturn,szInfo1,szInfo2,szInfo3; //SdShowInfoList variable
    STRING  rightID, svSTRING;                //SdShowInfoList variable
    STRING  svResult1,svResult2;
    NUMBER  nvType;
    NUMBER  nBack;     
    STRING  svTmp,szFindMe;
    NUMBER  iResult;  
    STRING szCaption,szDir;  
    NUMBER nResult1,nResult2,nResult3,nResult4,nResult5,nResultMongodb;     
    STRING svCheckWorkSpace;  
    NUMBER nCompareFlag; 
    STRING svCurrentVer,svCurrentDir,svResult,szIISMSG;	
    STRING szField1,szField2;
    NUMBER nvVar2;
    STRING szCaption1,szCaption2;    
    			
begin	
    if( REMOVEONLY ) then
        Disable( DIALOGCACHE );
		szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
   		SdSubstituteProductInfo( szMsg );
		MessageBox( szMsg, SEVERE );
		abort;
    endif;
    
	nSetupType = TYPICAL;
		
    iResult = GetDiskSpaceEx(SUPPORTDIR, GBYTES);
    if(iResult < 3 ) then  
    	szIISMSG = "There is no enough free space in system Driver to Extract installation file";
    	SdShowMsg ("", FALSE); 
    	MessageBox(szIISMSG,WARNING);
    	abort;
    endif;
    nResult1=1;
    nResult2=1;
    nResult3=1;
    nResult4=1;
    nResult5=1;
    
    if !(svCurrentVersion = "") then 
		FormatVer(svCurrentVersion,svCurrentVer); 
	endif;
		
    DeleteFile(SUPPORTDIR ^"builddatetime.txt");   
	RunApplication(SUPPORTDIR ^"getsystemdatetime.bat","\""+SUPPORTDIR^"builddatetime.txt"+"\"",FALSE,TRUE,TRUE);   	
    WriteLogFile("IE v7.0.0 " + ReadString(SUPPORTDIR,"builddatetime.txt",FALSE));	
    
    SdShowMsg ("Checking system information", TRUE);     			   
    SHELL_OBJECT_FOLDER = @PRODUCT_NAME;	
    szDir = INSTALLDIR;
    svUserName    = "Windows User";
    szCompany = "";
              	              
   	WriteLogFile("Need to save the timestamp of building data."); 
   	GetSystemInfo( DATE, nvReturn1, svResult1 );  
   	svDataSetupTime = svResult1;
   	svDataSetupTime = svDataSetupTime + " ";
   	GetSystemInfo( TIME, nvReturn1, svResult1 );
   	svDataSetupTime = svDataSetupTime + svResult1;
 
Dlg_Start:
  	SdShowMsg ("", FALSE); 
  	
Dlg_SdWelcome:
    szTitle = "";
    szMsg   = "The InstallShield Wizard will install NetBrain Worker Server on your machine. To continue the installation, click Next.";

    nResult = SdWelcome(szTitle, szMsg);

    if (nResult = BACK) goto Dlg_Start;  

    WriteLogFile("Step out: Welcome.");

Dlg_SdShowInfoList:
 	szTitle = "System Configuration";
    szMsg   = "The system configuration is auto-detected as follows:"; 
    listInfo = ListCreate (STRINGLIST); 
    //get CPU information
    GetSystemInfo (CPU, nvReturn1, svReturn);
    
    if( nvReturn1 == IS_UNKNOWN ) then
 		szInfo1 = "CPU: Unknown";
    else
    	Sprintf(szInfo1, "CPU: %d", nvReturn1,svReturn);
    endif;

    GetSystemInfo (EXTENDEDMEMORY, nvReturn2, svReturn);
    Sprintf(szInfo2, "Extended Memory: %d MB", nvReturn2/1024,svReturn);

    if(SYSINFO.WINNT.bAdmin_Logged_On) then
      	rightID = "Privileges : Administrative Privileges ";
    else
        rightID = "Privileges : You don't have enough privilege to continue the installation, please contact the administrator. If this is Windows 2008, maybe you need rerun the installation program by menu 'Run as administrator'.";
    endif;
     
    ServicePackID = SYSINFO.WINNT.nServicePack;
    NumToStr ( svSTRING, ServicePackID );    
    
    if(SYSINFO.WINNT.bWinVista_Server2008=TRUE)then 
    	szInfo3 = "Operating System: Windows 2008";
    	if(ServicePackID >0 ) then
    		szInfo3 =  szInfo3+" Service Pack "+   svSTRING;
    	endif;
    endif;
    
    if(SYSINFO.WINNT.bWin7_Server2008R2=TRUE) then      
   		szInfo3 = "Operating System: Windows 2008 R2";
    	if(ServicePackID >0 ) then
    		szInfo3 =  szInfo3+" Service Pack "+   svSTRING;
    	endif;
    endif;
    
    if(SYSINFO.WINNT.bWin8=TRUE)then 
    	szInfo3 = "Operating System: Windows 2012";
    	if(ServicePackID >0 ) then
    		szInfo3 =  szInfo3+" Service Pack "+   svSTRING;
    	endif;
    endif;
        if(SYSINFO.WINNT.bWin81=TRUE)then 
    	szInfo3 = "Operating System: Windows 2012 R2";
    	if(ServicePackID >0 ) then
    		szInfo3 =  szInfo3+" Service Pack "+   svSTRING;
    	endif;
    endif;
         
    ListAddString(listInfo, szInfo1, AFTER);
    ListAddString(listInfo, szInfo2, AFTER);
    ListAddString(listInfo, szInfo3, AFTER);
    ListAddString(listInfo, rightID, AFTER); 
    
    nResult = SdShowInfoList ( szTitle, szMsg, listInfo );
    ListDestroy(listInfo);
    if(nResult = BACK) goto Dlg_SdWelcome; 
 
    if(rightID = "Privileges : You don't have enough privilege to continue the installation, please contact the administrator. If this is Windows 2008, maybe you need rerun the installation program by menu 'Run as administrator'.") then
    	WriteLogFile( MSG_ERRO_CHECK_ADMIN );
    	MessageBox(MSG_ERRO_CHECK_ADMIN,WARNING);
        abort;
    endif;    
                                          
    WriteLogFile("Step out: System information");
 
Dlg_EXTENDEDMEMORY:
    if ((nvReturn2/1024) < 16000) then
    nResult = MessageBox(MSG_WARN_CHECK_EXTENDEDMEMORY, MB_YESNO );
		if (nResult = IDNO ) then
		abort;
		endif;
    endif;
    
Dlg_SdLicense:    
    szTitle    = "";
    nResult    = SdLicenseEx ( szTitle, "", "", SUPPORTDIR ^ "license.rtf", TRUE ); 
    if (nResult = BACK) goto Dlg_SdShowInfoList;  
    WriteLogFile("Step out: License");
     
Dlg_SdCustomerInformation:
	szTitle = "";
	szMsg   = "";
	nResult = SdCustomerInformation ( szTitle, svUserName, szCompany,nUser);
	if (nResult = BACK) goto Dlg_SdLicense;      
	WriteLogFile("Step out: Customer information:" + svUserName + ":" + szCompany   );          

Dlg_SdAskDestPath: 	
	szTitle = "Destination Location \n    Click Next to install to the default folder, or click Change to choose another one. \n";
    szMsg   = "Install %P to:";
    nResult = SdAskDestPath2(szTitle, szMsg, INSTALLDIR);     
    szDir = INSTALLDIR;

    if (nResult = BACK) then
   		goto Dlg_SdCustomerInformation;  
    endif;

    //must be 64bit
   	if (SYSINFO.bIsWow64) then
		szFindMe=PROGRAMFILES; 
		nResult=StrFindEx ( szDir, szFindMe, 0 );

		if (nResult>=0)	then
			//StrReplace(szDir,szFindMe,PROGRAMFILES64,0);
			MessageBox(MSG_INFO_32BIT_INSTALL, WARNING);
			goto Dlg_SdAskDestPath;	
		endif;
     endif;

   	nResult=(szDir[1] = ":") && (szDir[2] = "\\");

   	if (!nResult) then 
   		Sprintf( svTempVal, MSG_ERR_PATH_FORMAT, szDir );
   		WriteLogFile( svTempVal );
    	MessageBox (svTempVal, WARNING);
    	goto Dlg_SdAskDestPath;
    endif; 

   	INSTALLDIR = szDir;   
   	svDataDirRoot = INSTALLDIR;  
   	
   	svWebServerInstalldir = svDataDirRoot ^ "Web Server";
   	svWorkerServerInstalldir = svDataDirRoot ^ "Worker Server";
   	svMongodbinitInstalldir = svDataDirRoot ^ "Mongodbinit"; 

  	if(StrLength(szDir)>100) then
        MessageBox("The path is too long.", SEVERE);
        goto Dlg_SdAskDestPath;
  	endif;
  	
  	if (CheckPathSpecChar(szDir) == 0) then
  		goto Dlg_SdAskDestPath;
  	endif;
  	
  	iResult = GetDiskSpaceEx(szDir, MBYTES);  
  	if (iResult < DISKSPACE_M) then
        MessageBox(DISKSPACENOTENOUGH, SEVERE);
        goto Dlg_SdAskDestPath;
    endif;
      	
   	WriteLogFile("Step out: Input root dir:" + INSTALLDIR  );  

Dlg_SdFeatureTree:
	szTitle    = "Application Components";
	szMsg      = "";   

	if (svFeatureWorkerServer = "0") then
		FeatureSelectItem(MEDIA, FeatureWorkerServer, FALSE);
	endif;
	 
	if (svFeatureWebAPIService = "0") then
		FeatureSelectItem (MEDIA, FeatureWebAPIService, FALSE);
	endif;

	if (svFeatureWebServer = "0") then
		FeatureSelectItem (MEDIA, FeatureWebServer, FALSE);
	endif;
		
	if (MODE != SILENTMODE) then
		nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2);
		if (nResult = BACK) goto Dlg_SdAskDestPath;  
	endif; 
	 
	nResult1 = FeatureIsItemSelected(MEDIA, FeatureWorkerServer);
	nResult2 = FeatureIsItemSelected(MEDIA, FeatureWebAPIService); 
	nResult3 = FeatureIsItemSelected(MEDIA, FeatureWebServer); 

	if (nResult1 = 1) then 
		svFeatureWorkerServer = "1";
	else
		svFeatureWorkerServer = "0";
	endif; 

	if (nResult2 = 1) then
		svFeatureWebAPIService = "1";    	
	else
		svFeatureWebAPIService = "0";    	
	endif;

	if (nResult3 = 1) then
		svFeatureWebServer = "1";    	
	else
		svFeatureWebServer = "0";    	
	endif;
		
	if (MODE != SILENTMODE) then
		if ((svFeatureWorkerServer = "1") || 
			(svFeatureWebAPIService = "1") || 
			(svFeatureWebServer = "1")) then
			Enable(NEXTBUTTON);
		else
			MessageBox("Please select at least one feature for installation.", INFORMATION);
			goto Dlg_SdFeatureTree;
		endif;
	endif;

	if (MODE = SILENTMODE) then
		if (svFeatureWorkerServer = "1") then
			FeatureSelectItem (MEDIA, FeatureWorkerServer, TRUE);
		endif;
	 
		if (svFeatureWebAPIService = "1") then
			FeatureSelectItem (MEDIA, FeatureWebAPIService, TRUE);
		endif;

		if (svFeatureWebServer = "1") then
			FeatureSelectItem (MEDIA, FeatureWebServer, TRUE);
		endif;
		
		if ((svFeatureWorkerServer = "0") && (svFeatureWebAPIService = "0") && (svFeatureWebServer = "0")) then  
			FeatureSelectItem(MEDIA, FeatureWorkerServer, TRUE);
			FeatureSelectItem(MEDIA, FeatureWebAPIService, TRUE);
			FeatureSelectItem(MEDIA, FeatureWebServer, TRUE);
		endif;
	endif;

	if ((svFeatureWorkerServer = "0") && 
		(svFeatureWebAPIService = "0") && 
		(svFeatureWebServer = "1")) then
		goto Dlg_SdWebAPIService;
	endif;
 
Dlg_SdMongoDB:	
	nResult = SdMongoDB(); 

	if (nResult = BACK) then
		goto Dlg_SdFeatureTree;
	endif;

	// Get ip and port of mongodb primary node
	ListGetFirstString(mongoDbServers, mongoprimarynodestr);	
	StrTrim(mongoprimarynodestr);

	if (StrCompare ("", mongoprimarynodestr) = 0) then 
		MessageBox ("The servers string of MongoDB cannot be empty.", SEVERE);
		goto Dlg_SdMongoDB;
	endif;

	// Check MongoDB username and password.
	StrTrim(mongoDbUsername);
	StrTrim(mongoDbPassword);
	StrTrim(mongoDbReplicaSetName);

	if (StrCompare("", mongoDbUsername) = 0) then 
		MessageBox ("The MongoDB username cannot be empty.", SEVERE);
		goto Dlg_SdMongoDB;
	endif;

	if (mongoDbUsername % " ") then
		MessageBox("The username cannot contain a space.", SEVERE);
		goto Dlg_SdMongoDB;
	endif;

	if (StrCompare("", mongoDbPassword) = 0) then 
		MessageBox ("The MongoDB password cannot be empty.", SEVERE);
		goto Dlg_SdMongoDB;
	endif;

	if (mongoDbPassword % " ") then
		MessageBox("The password cannot contain a space.", SEVERE);
		goto Dlg_SdMongoDB;
	endif;

	if (mongoDbUseSsl == BUTTON_CHECKED) then
		mongodbsslstr = "true";
	elseif (mongoDbUseSsl == BUTTON_UNCHECKED) then
		mongodbsslstr = "false";
	endif;

	// Validate Mongo DB server.
	nLocation = StrFindEx(mongoprimarynodestr, ":", 0);
	StrSub(svMongodbprimaryIP, mongoprimarynodestr, 0, nLocation);
	StrSub(svMongodbprimaryPort, mongoprimarynodestr, nLocation+1, StrLength(mongoprimarynodestr));

	nResult = ListGetFirstString (mongoDbServers, svString);

	while(nResult != END_OF_LIST)
		// Display the current element.
		StrTrim(svString);

		if (svString != "") then 
			if ((StrFind (svString, ":")<0) || (CheckPathSpecCharSlient(svString) == 0)) then 
				MessageBox (svString+MSG_ERR_IP_PORT_SPECCHAR, WARNING);
				goto Dlg_SdMongoDB;
			endif; 
		endif;

		nResult = ListGetNextString (mongoDbServers, svString);
	endwhile;
	
	if (ValidateUserInput("VerifyMongoDBConnection.exe", 
						  "VerifyMongoDBConnection.Error", 
						  "MongoDB") == FALSE) then
		goto Dlg_SdMongoDB;	
	endif;
		
	WriteLogFile("replicaSetName is:"+ mongoDbReplicaSetName); 
	WriteLogFile("username is:" + mongoDbUsername);
	WriteLogFile("ssl is:" + mongodbsslstr);
	WriteLogFile("mongoprimarynodestr is:" + mongoprimarynodestr);
	WriteLogFile("mongoprimarynodeip is:" + mongoprimarynodestr);
	WriteLogFile("mongoprimarynodeport is:" + mongoprimarynodestr);

Dlg_SdRabbitMQ:
	nResult = SdRabbitMQ(); 
	if (nResult = BACK) then
	   goto Dlg_SdMongoDB;       
	endif;
		
	if (rabbitMqUseSsl == BUTTON_CHECKED) then
		svrabbitmqssl = "true";
	elseif (rabbitMqUseSsl == BUTTON_UNCHECKED) then
		svrabbitmqssl = "false";
	endif;

	StrToNum(nvVar2, rabbitMqLocalPort); 

	if( nvVar2 > 65535 || nvVar2 < 100 ) then 
		MessageBox("The local port number of RabbitMQ must be between 100 and 65535.", SEVERE );
		goto Dlg_SdRabbitMQ; 
	endif;  

	nResult = ListGetFirstString(rabbitMqServers, svString);

    if (StrCompare ("", svString) = 0) then 
		MessageBox ("The servers string of RabbitMQ can not be empty.", SEVERE);
		goto Dlg_SdRabbitMQ;
    endif;

	// Loop while list items continue to be retrieved.
	while (nResult != END_OF_LIST)
		StrTrim(svString);

		if (svString != "") then 
			if (CheckPathSpecCharSlient(svString) == 0) then
				MessageBox (svString + MSG_ERR_IP_PORT_SPECCHAR, WARNING);
				goto Dlg_SdRabbitMQ;
			endif;
		endif;

		nResult = ListGetNextString (rabbitMqServers, svString);
	endwhile;

	StrTrim(rabbitMqUsername);

	if (StrCompare("", rabbitMqUsername) = 0) then 
		MessageBox("The username of RabbitMQ cannot be empty.", SEVERE);
		goto Dlg_SdRabbitMQ;
	endif;

	if (rabbitMqUsername % " ") then
		MessageBox("The username cannot contain a space.", SEVERE);
		goto Dlg_SdRabbitMQ;
	endif;

	StrTrim(rabbitMqPassword);

	if (StrCompare ("", rabbitMqPassword) = 0) then 
		MessageBox ("The password of RabbitMQ cannot be empty.", SEVERE);
		goto Dlg_SdRabbitMQ;
	endif;

	if (rabbitMqPassword % " ") then
		MessageBox("The password cannot contain a space.", SEVERE);
		goto Dlg_SdRabbitMQ;
	endif;
	
	
	StrTrim(rabbitMqLocalPort);

	if (StrCompare ("", rabbitMqLocalPort) = 0) then 
		MessageBox ("The local port number of RabbitMQ cannot be empty.", SEVERE);
		goto Dlg_SdRabbitMQ;
	endif;

	if (ValidateUserInput("VerifyRabbitMQConnection.exe", 
						  "VerifyRabbitMQConnection.Error", 
						  "RabbitMQ") == FALSE) then
		goto Dlg_SdRabbitMQ;	
	endif;

	WriteLogFile("RabbitMQ ip is:" + svamqpip);
	WriteLogFile("RabbitMQ port is:" + rabbitMqLocalPort);
	
Dlg_SdRedis:
	nResult = SdRedis(); 

	if (nResult = BACK) then
		goto Dlg_SdRabbitMQ;       
	endif;

	StrTrim(redisServer);

	if (StrCompare ("", redisServer) = 0) then 
		MessageBox("The IP address of Redis cannot be empty.", SEVERE);
		goto Dlg_SdRedis;
	endif;

	if (redisUseSsl == BUTTON_CHECKED) then
		redisLocalPort = stunnelPort;
	else
		redisLocalPort = redisPort;
	endif;
	
	StrTrim(redisLocalPort);

	if (StrCompare ("", redisLocalPort) = 0) then 
		MessageBox ("The port number of Redis cannot be empty.", SEVERE);
		goto Dlg_SdRedis;
	endif;

	StrToNum(nvVar2, redisLocalPort); 

	if (nvVar2 > 65535 || nvVar2 < 100) then 
		MessageBox ( "The port number must be between 100 and 65535.", SEVERE );
		goto Dlg_SdRedis; 
	endif;  

	StrTrim(redisPassword);

	if (StrCompare("", redisPassword) = 0) then 
		MessageBox("The password of Redis cannot be empty.", SEVERE);
		goto Dlg_SdRedis;
	endif;

	if (redisPassword % " ") then
		MessageBox("The password cannot contain a space.", SEVERE);
		goto Dlg_SdRedis;
	endif;

	if (ValidateUserInput("VerifyRedisConnection.exe", 
						  "VerifyRedisConnection.Error", 
						  "Redis") == FALSE) then
		goto Dlg_SdRedis;	
	endif;

	WriteLogFile("SETUP Finish Dlg_CdAskREDISIPPort");
	WriteLogFile("The ip of Redis is : " + redisServer);
	WriteLogFile("The port of Redis is : " + redisLocalPort);

	if (mongoDbUseSsl == BUTTON_CHECKED ||
		rabbitMqUseSsl == BUTTON_CHECKED ||
		redisUseSsl == BUTTON_CHECKED) then
		goto Dlg_SdCertificate;
	elseif (svFeatureWebServer = "1") then
		goto Dlg_SdWebAPIService;
	else
		goto Dlg_SdStartCopy;
	endif;

Dlg_SdCertificate:
	nResult = SdCertificate(); 

	if (nResult = BACK) then
		goto Dlg_SdRedis;       
	endif;

	StrTrim(caPath);

	if (ignoreCa == BUTTON_UNCHECKED && StrCompare ("", caPath) = 0) then 
		MessageBox ("The certificate path cannot be empty.", SEVERE);
		goto Dlg_SdCertificate;
	endif;

	if (svFeatureWebServer = "1") then
		goto Dlg_SdWebAPIService;
	else
		goto Dlg_SdStartCopy;
	endif;
	
Dlg_SdWebAPIService:
	nResult = SdWebAPIService(); 

    if (nResult = BACK) then
		if ((svFeatureWorkerServer = "0") &&
			(svFeatureWebAPIService = "0")) then
			goto Dlg_SdFeatureTree;
		elseif (mongoDbUseSsl == BUTTON_CHECKED ||
				rabbitMqUseSsl == BUTTON_CHECKED ||
				redisUseSsl == BUTTON_CHECKED) then
				goto Dlg_SdCertificate;
		else
			goto Dlg_SdRedis;
		endif;
    endif;

	StrTrim(webAPIServerUrl);

	if (StrLength(webAPIServerUrl) > 0 && StrLength(webAPIServerUrl) < 8) then
		MessageBox ("This Web API Services address is invalid.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

	StrSub(szField1, webAPIServerUrl, 0, 7);
	StrSub(szField2, webAPIServerUrl, 0, 8);

	if (StrLength(webAPIServerUrl) > 0 && 
		StrCompare(szField1, "http://") != 0 && 
		StrCompare(szField2, "https://") != 0) then 
		MessageBox ("The Web API Services address should start with 'http://' or 'https://'.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

	if (StrFind(webAPIServerUrl, "127.0.0.1") > 0 || 
		StrFind(webAPIServerUrl, "localhost") > 0) then 
		MessageBox ("This Web API Services address is invalid.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

	if (StrFindEx(webAPIServerUrl, "///", 0) > 0) then
		MessageBox ("This Web API Services address is invalid.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

	if (StrLength(webAPIServerUrl) > 8 && 
		StrFindEx(webAPIServerUrl, "/", 8) > 0 ) then 
		MessageBox ("This Web API Services address is invalid.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

	nvVar2 = StrFindEx(webAPIServerUrl, "//", 0);

	if (StrLength(webAPIServerUrl) == nvVar2 + 2) then
		MessageBox ("This Web API Services address is invalid.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;
    
Dlg_SdStartCopy:
    szTitle = "Ready to install NetBrain Integrated Edition";
    szMsg   = "Review the following information before clicking Install to start copying files.";
    listData = ListCreate( STRINGLIST );  
    ListAddString(listData, "Destination Directory:", AFTER);
    ListAddString(listData, "              " + INSTALLDIR, AFTER);
    ListAddString (listData, "User Information: ", AFTER);
    ListAddString (listData, "              "+"User Name: " + svUserName, AFTER);
    ListAddString (listData, "              "+"Company Name: " + szCompany, AFTER);

    ListAddString (listData, "Components to be Installed:", AFTER);

    if (svFeatureWorkerServer = "1") then
    	ListAddString(listData, "              " + FeatureWorkerServerName, AFTER);
    endif;

    if (svFeatureWebAPIService = "1") then
    	ListAddString(listData, "              " + FeatureWebAPIServiceName, AFTER);
    endif;

    if (svFeatureWebServer = "1") then
    	ListAddString(listData, "              " + FeatureWebServerName, AFTER);
    endif;

    ListAddString(listData, "", AFTER);
                                           
    nResult = SdStartCopy(szTitle, szMsg, listData);	

    if (nResult = BACK) then
		if ((svFeatureWebServer = "1")) then
			goto Dlg_SdWebAPIService;
		elseif (mongoDbUseSsl == BUTTON_CHECKED ||
				rabbitMqUseSsl == BUTTON_CHECKED ||
				redisUseSsl == BUTTON_CHECKED) then
				goto Dlg_SdCertificate;
		else
			goto Dlg_SdRedis;
		endif;
    endif;

    ListDestroy(listData);
   	WriteLogFile("Step out: Start Copy."); 
   	
   	Disable(CANCELBUTTON);
    SetStatusExStaticText(INSTALLSTATUS);
	
	NumToStr(svFeatureWorkerServer, nResult1);
	NumToStr(svFeatureWebAPIService, nResult2);
	NumToStr(svFeatureWebServer, nResult3);
	
	svWorkerServerInstalldir = INSTALLDIR ^ "Worker Server";
	svMongodbinitInstalldir = INSTALLDIR ^ "Mongodbinit";
	svWSSInstalldir = svWebServerInstalldir ^ "nb_publish_server";
	svWSCInstalldir = svWebServerInstalldir ^ "nb_publish_client"; 
	
    Enable(STATUSEX);
    
    return 0;
end;

//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// The OnMaintUIBefore event is called by the framework when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
	NUMBER nResult, nType, nvSize, nvType;
    STRING szTitle, szMsg, szCaption, szValue; 
    STRING svResult1,svResult2,svResult3;    //SdFeatureDialog variable    
    NUMBER nvPostgresSelected;   
    NUMBER nReturn;  
    NUMBER nResult1,nResult2,nResult3,nResult4;
    STRING szCaption1,szCaption2;  
    STRING szField1,szField2;
    NUMBER nvVar2;
begin  
	
Dlg_Start:
	 if(SYSINFO.WINNT.bAdmin_Logged_On == FALSE) then
        WriteLogFile( MSG_ERRO_CHECK_ADMIN );
    	MessageBox(MSG_ERRO_CHECK_ADMIN,WARNING);
        abort;
     endif;

Dlg_SdFeatureTree: 
	   
	szTitle    = "";
	szMsg      = ""; 
	Disable(BACKBUTTON);

	if (REMOVEONLY) then
		FeatureSelectItem(MEDIA, FeatureWorkerServer, FALSE);
		FeatureSelectItem(MEDIA, FeatureWebAPIService, FALSE); 
		FeatureSelectItem(MEDIA, FeatureWebServer, FALSE); 
		FeatureSelectItem(MEDIA, FeatureDefault, FALSE);
		goto RemoveFeatures;
	else
		if (RegDBGetKeyValueEx(REGROOT, REGKEY_WORKERSERVER,
							   nvType, svFeatureWorkerServerInstalled, nvSize) < 0 ) then 
			WriteLogFile("Failed get registry value: " + REGKEY_WORKERSERVER);
		endif; 

		if (RegDBGetKeyValueEx(REGROOT, REGKEY_WEBAPISERVICE,
							   nvType, svFeatureWebAPIServiceInstalled, nvSize) < 0 ) then 
			WriteLogFile("Failed get registry value: " + REGKEY_WEBAPISERVICE);
		endif; 

		if (RegDBGetKeyValueEx(REGROOT, REGKEY_WEBSERVER,
							   nvType, svFeatureWebServerInstalled, nvSize) < 0 ) then 
			WriteLogFile("Failed get registry value: " + REGKEY_WEBSERVER);
		endif; 

		szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);    
		szMsg  = SdLoadString(IFX_SDFINISH_MAINT_MSG1); 
		nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2); 

		if (nResult = BACK) goto Dlg_Start;          

		FeatureSelectItem(MEDIA, FeatureDefault, TRUE);

		nResult1 = FeatureIsItemSelected(MEDIA, FeatureWorkerServer);
		nResult2 = FeatureIsItemSelected(MEDIA, FeatureWebAPIService); 
		nResult3 = FeatureIsItemSelected(MEDIA, FeatureWebServer); 

		if (nResult1 = 1) then 
			svFeatureWorkerServer = "1";
		else
			svFeatureWorkerServer = "0";
		endif; 

		if (nResult2 = 1) then
			svFeatureWebAPIService = "1";    	
		else
			svFeatureWebAPIService = "0";    	
		endif;

		if (nResult3 = 1) then
			svFeatureWebServer = "1";    	
		else
			svFeatureWebServer = "0";    	
		endif;

	endif;

Dlg_SdMongoDB:	
	Enable(BACKBUTTON);

	nResult = SdMongoDB(); 

	if (nResult = BACK) then
		goto Dlg_SdFeatureTree;
	endif;

	// Get ip and port of mongodb primary node
	ListGetFirstString(mongoDbServers, mongoprimarynodestr);	
	StrTrim(mongoprimarynodestr);

	if (StrCompare ("", mongoprimarynodestr) = 0) then 
		MessageBox ("The servers string of MongoDB cannot be empty.", SEVERE);
		goto Dlg_SdMongoDB;
	endif;

	// Check MongoDB username and password.
	StrTrim(mongoDbUsername);
	StrTrim(mongoDbPassword);
	StrTrim(mongoDbReplicaSetName);

	if (StrCompare("", mongoDbUsername) = 0) then 
		MessageBox ("The MongoDB username cannot be empty.", SEVERE);
		goto Dlg_SdMongoDB;
	endif;

	if (mongoDbUsername % " ") then
		MessageBox("The username cannot contain a space.", SEVERE);
		goto Dlg_SdMongoDB;
	endif;

	if (StrCompare("", mongoDbPassword) = 0) then 
		MessageBox ("The MongoDB password cannot be empty.", SEVERE);
		goto Dlg_SdMongoDB;
	endif;

	if (mongoDbPassword % " ") then
		MessageBox("The password cannot contain a space.", SEVERE);
		goto Dlg_SdMongoDB;
	endif;

	if (mongoDbUseSsl == BUTTON_CHECKED) then
		mongodbsslstr = "true";
	elseif (mongoDbUseSsl == BUTTON_UNCHECKED) then
		mongodbsslstr = "false";
	endif;


	nLocation = StrFindEx(mongoprimarynodestr, ":", 0);
	StrSub(svMongodbprimaryIP, mongoprimarynodestr, 0, nLocation);
	StrSub(svMongodbprimaryPort, mongoprimarynodestr, nLocation+1, StrLength(mongoprimarynodestr));

	nResult = ListGetFirstString (mongoDbServers, svString);

	// Loop while list items continue to be retrieved.
	while(nResult != END_OF_LIST)
		// Display the current element.
		StrTrim(svString);

		if (svString != "") then 
			if ((StrFind (svString, ":")<0) || (CheckPathSpecCharSlient(svString) == 0)) then 
				MessageBox (svString+MSG_ERR_IP_PORT_SPECCHAR, WARNING);
				goto Dlg_SdMongoDB;
			endif; 
		endif;

		nResult = ListGetNextString (mongoDbServers, svString);
	endwhile;

	if (ValidateUserInput("VerifyMongoDBConnection.exe", 
						  "VerifyMongoDBConnection.Error", 
						  "MongoDB") == FALSE) then
		goto Dlg_SdMongoDB;	
	endif;
		
	WriteLogFile("replicaSetName is:"+ mongoDbReplicaSetName); 
	WriteLogFile("username is:" + mongoDbUsername);
	WriteLogFile("ssl is:" + mongodbsslstr);
	WriteLogFile("mongoprimarynodestr is:" + mongoprimarynodestr);
	WriteLogFile("mongoprimarynodeip is:" + mongoprimarynodestr);
	WriteLogFile("mongoprimarynodeport is:" + mongoprimarynodestr);

Dlg_SdRabbitMQ:
	Enable(BACKBUTTON);

	nResult = SdRabbitMQ(); 

	if (nResult = BACK) then
	   goto Dlg_SdMongoDB;       
	endif;
		
	if (rabbitMqUseSsl == BUTTON_CHECKED) then
		svrabbitmqssl = "true";
	elseif (rabbitMqUseSsl == BUTTON_UNCHECKED) then
		svrabbitmqssl = "false";
	endif;

	StrToNum(nvVar2,rabbitMqLocalPort); 

	if( nvVar2 > 65535 || nvVar2 < 100 ) then 
		MessageBox ( "The local port number of RabbitMQ must be between 100 and 65535.", SEVERE );
		goto Dlg_SdRabbitMQ; 
	endif;  
	
	nResult = ListGetFirstString (rabbitMqServers, svString);
	StrTrim(svString);

    if (StrCompare ("", svString) = 0) then 
		MessageBox ("The servers string of RabbitMQ can not be empty.", SEVERE);
		goto Dlg_SdRabbitMQ;
    endif;
    
	// Loop while list items continue to be retrieved.
	while (nResult != END_OF_LIST)
		StrTrim(svString);

		if (svString != "") then 
			if (CheckPathSpecCharSlient(svString) == 0) then
				MessageBox (svString + MSG_ERR_IP_PORT_SPECCHAR, WARNING);
				goto Dlg_SdRabbitMQ;
			endif;
		endif;

		nResult = ListGetNextString (rabbitMqServers, svString);
	endwhile;

	StrTrim(rabbitMqUsername);

	if (StrCompare("", rabbitMqUsername) = 0) then 
		MessageBox("The username of RabbitMQ cannot be empty.", SEVERE);
		goto Dlg_SdRabbitMQ;
	endif;

	if (rabbitMqUsername % " ") then
		MessageBox("The username cannot contain a space.", SEVERE);
		goto Dlg_SdRabbitMQ;
	endif;

	StrTrim(rabbitMqPassword);

	if (StrCompare ("", rabbitMqPassword) = 0) then 
		MessageBox ("The password of RabbitMQ cannot be empty.", SEVERE);
		goto Dlg_SdRabbitMQ;
	endif;

	if (rabbitMqPassword % " ") then
		MessageBox("The password cannot contain a space.", SEVERE);
		goto Dlg_SdRabbitMQ;
	endif;

	StrTrim(rabbitMqLocalPort);

	if (StrCompare ("", rabbitMqLocalPort) = 0) then 
		MessageBox ("The local port number of RabbitMQ cannot be empty.", SEVERE);
		goto Dlg_SdRabbitMQ;
	endif;

	if (ValidateUserInput("VerifyRabbitMQConnection.exe", 
						  "VerifyRabbitMQConnection.Error", 
						  "RabbitMQ") == FALSE) then
		goto Dlg_SdRabbitMQ;	
	endif;

	WriteLogFile("RabbitMQ ip is:" + svamqpip);
	WriteLogFile("RabbitMQ port is:" + rabbitMqLocalPort);

Dlg_SdRedis:
	Enable(BACKBUTTON);

	nResult = SdRedis(); 

	if (nResult = BACK) then
		goto Dlg_SdRabbitMQ;       
	endif;

	StrTrim(redisServer);

	if (StrCompare ("", redisServer) = 0) then 
		MessageBox("The IP address of Redis cannot be empty.", SEVERE);
		goto Dlg_SdRedis;
	endif;

	if (redisUseSsl == BUTTON_CHECKED) then
		redisLocalPort = stunnelPort;
	else
		redisLocalPort = redisPort;
	endif;
	
	StrTrim(redisLocalPort);

	if (StrCompare ("", redisLocalPort) = 0) then 
		MessageBox ("The port number of Redis cannot be empty.", SEVERE);
		goto Dlg_SdRedis;
	endif;

	StrToNum(nvVar2, redisLocalPort); 

	if (nvVar2 > 65535 || nvVar2 < 100) then 
		MessageBox ( "The port number must be between 100 and 65535.", SEVERE );
		goto Dlg_SdRedis; 
	endif;  

	StrTrim(redisPassword);

	if (StrCompare("", redisPassword) = 0) then 
		MessageBox("The password of Redis cannot be empty.", SEVERE);
		goto Dlg_SdRedis;
	endif;

	if (redisPassword % " ") then
		MessageBox("The password cannot contain a space.", SEVERE);
		goto Dlg_SdRedis;
	endif;

	if (ValidateUserInput("VerifyRedisConnection.exe", 
						  "VerifyRedisConnection.Error", 
						  "Redis") == FALSE) then
		goto Dlg_SdRedis;	
	endif;

	WriteLogFile("SETUP Finish Dlg_CdAskREDISIPPort");
	WriteLogFile("The ip of Redis is : " + redisServer);
	WriteLogFile("The port of Redis is : " + redisLocalPort);

	if (mongoDbUseSsl == BUTTON_CHECKED ||
		rabbitMqUseSsl == BUTTON_CHECKED ||
		redisUseSsl == BUTTON_CHECKED) then
		goto Dlg_SdCertificate;
	elseif (svFeatureWebServer = "1") then
		goto Dlg_SdWebAPIService;
	else
		goto Dlg_SdStartCopy;
	endif;

Dlg_SdCertificate:
	Enable(BACKBUTTON);

	nResult = SdCertificate(); 

	if (nResult = BACK) then
		goto Dlg_SdRedis;       
	endif;

	StrTrim(caPath);

	if (ignoreCa == BUTTON_UNCHECKED && StrCompare ("", caPath) = 0) then 
		MessageBox ("The certificate path cannot be empty.", SEVERE);
		goto Dlg_SdCertificate;
	endif;

	if (svFeatureWebServer = "1") then
		goto Dlg_SdWebAPIService;
	else
		goto Dlg_SdStartCopy;
	endif;
	
Dlg_SdWebAPIService:
	Enable(BACKBUTTON);

	nResult = SdWebAPIService(); 

    if (nResult = BACK) then
		if ((svFeatureWorkerServer = "0") &&
			(svFeatureWebAPIService = "0")) then
			goto Dlg_SdFeatureTree;
		elseif (mongoDbUseSsl == BUTTON_CHECKED ||
				rabbitMqUseSsl == BUTTON_CHECKED ||
				redisUseSsl == BUTTON_CHECKED) then
				goto Dlg_SdCertificate;
		else
			goto Dlg_SdRedis;
		endif;
    endif;

	StrTrim(webAPIServerUrl);

	if (StrLength(webAPIServerUrl) > 0 && StrLength(webAPIServerUrl) < 8) then
		MessageBox ("This Web API Services address is invalid.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

	StrSub(szField1, webAPIServerUrl, 0, 7);
	StrSub(szField2, webAPIServerUrl, 0, 8);

	if (StrLength(webAPIServerUrl) > 0 && 
		StrCompare(szField1, "http://") != 0 && 
		StrCompare(szField2, "https://") != 0) then 
		MessageBox ("The Web API Services address should start with 'http://' or 'https://'.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

	if (StrFind(webAPIServerUrl, "127.0.0.1") > 0 || 
		StrFind(webAPIServerUrl, "localhost") > 0) then 
		MessageBox ("This Web API Services address is invalid.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

	if (StrFindEx(webAPIServerUrl, "///", 0) > 0) then
		MessageBox ("This Web API Services address is invalid.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

	if (StrLength(webAPIServerUrl) > 8 && 
		StrFindEx(webAPIServerUrl, "/", 8) > 0 ) then 
		MessageBox ("This Web API Services address is invalid.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

	nvVar2 = StrFindEx(webAPIServerUrl, "//", 0);

	if (StrLength(webAPIServerUrl) == nvVar2 + 2) then
		MessageBox ("This Web API Services address is invalid.", SEVERE);
		goto Dlg_SdWebAPIService;
	endif;

Dlg_SdStartCopy:
	Enable(BACKBUTTON);

    szTitle = "Ready to install NetBrain Integrated Edition";
    szMsg   = "Review the following information before clicking Install to start copying files.";

    listData = ListCreate( STRINGLIST );  

    ListAddString(listData, "Destination Directory:", AFTER);
    ListAddString(listData, "              " + INSTALLDIR, AFTER);
    ListAddString(listData, "User Information: ", AFTER);
    ListAddString(listData, "              " + "User Name: " + svUserName, AFTER);
    ListAddString(listData, "              " + "Company Name: " + szCompany, AFTER);


    if (svFeatureWorkerServer = "1" || 
		svFeatureWebAPIService = "1" || 
		svFeatureWebServer = "1") then
		
		ListAddString (listData, "Components to be Installed/Reinstalled:", AFTER);

		if (svFeatureWorkerServer = "1") then
			ListAddString(listData, "              " + FeatureWorkerServerName, AFTER);
		endif;

		if (svFeatureWebAPIService = "1") then
			ListAddString(listData, "              " + FeatureWebAPIServiceName, AFTER);
		endif;

		if (svFeatureWebServer = "1") then
			ListAddString(listData, "              " + FeatureWebServerName, AFTER);
		endif;
	endif;
	
    if ((svFeatureWorkerServer = "0" &&svFeatureWorkerServerInstalled = "1") || 
		(svFeatureWebAPIService = "0" && svFeatureWebAPIServiceInstalled = "1") || 
		(svFeatureWebServer = "0" && svFeatureWebServerInstalled = "1")) then
		ListAddString (listData, "Components to be Uninstalled:", AFTER);

		if (svFeatureWorkerServer = "0" &&svFeatureWorkerServerInstalled = "1") then
			ListAddString(listData, "              " + FeatureWorkerServerName, AFTER);
		endif;

		if (svFeatureWebAPIService = "0" && svFeatureWebAPIServiceInstalled = "1") then
			ListAddString(listData, "              " + FeatureWebAPIServiceName, AFTER);
		endif;

		if (svFeatureWebServer = "0"&& svFeatureWebServerInstalled = "1") then
			ListAddString(listData, "              " + FeatureWebServerName, AFTER);
		endif;
	endif;
	
    ListAddString(listData, "", AFTER);
                                           
    nResult = SdStartCopy(szTitle, szMsg, listData);	

    if (nResult = BACK) then
		if ((svFeatureWebServer = "1")) then
			goto Dlg_SdWebAPIService;
		elseif (mongoDbUseSsl == BUTTON_CHECKED ||
				rabbitMqUseSsl == BUTTON_CHECKED ||
				redisUseSsl == BUTTON_CHECKED) then
				goto Dlg_SdCertificate;
		else
			goto Dlg_SdRedis;
		endif;
    endif;

    ListDestroy(listData);
   	WriteLogFile("Step out: Start Copy."); 
   	
   	Disable(CANCELBUTTON);
    SetStatusExStaticText(INSTALLSTATUS);
	
	NumToStr(svFeatureWorkerServer, nResult1);
	NumToStr(svFeatureWebAPIService, nResult2);
	NumToStr(svFeatureWebServer, nResult3);
	
	svWorkerServerInstalldir = INSTALLDIR ^ "Worker Server";
	svMongodbinitInstalldir = INSTALLDIR ^ "Mongodbinit";
	svWSSInstalldir = svWebServerInstalldir ^ "nb_publish_server";
	svWSCInstalldir = svWebServerInstalldir ^ "nb_publish_client"; 

RemoveFeatures:	
	if (MODE != SILENTMODE) then
		if (REMOVEONLY) then
			szMsg = "Are you sure you want to remove the NetBrain Integrated Edition?";
			nResult = MessageBox(szMsg, MB_YESNO );

			if (nResult != IDYES ) then
					abort;
			endif;
		else
			if  ((svFeatureWorkerServer = "0" && svFeatureWorkerServerInstalled = "1") || 
				 (svFeatureWebAPIService = "0" && svFeatureWebAPIServiceInstalled = "1") ||
				 (svFeatureWebServer = "0" && svFeatureWebServerInstalled = "1")) then    
				szMsg  = "Are you sure you want to remove the features of NetBrain Integrated Edition?";


				Enable(BACKBUTTON);
				
				if (REMOVEALL) then
					nResult = MessageBox(szMsg, MB_YESNO );
					
					if (nResult != IDYES) then
						// In non-REMOVEONLY mode, redisplay the previous dialog.
						goto Dlg_SdStartCopy;
					endif;
				endif;
			endif;
		 
			Disable(CANCELBUTTON);

			SdShowMsg("Removing, please wait...", TRUE); 
			SdShowMsg("", FALSE);   
		endif;
	endif;    
			
	Enable(STATUSEX);
end;

//---------------------------------------------------------------------------
// OnEnd
//
// The OnEnd event is called at the end of the setup. This event is not
// called if the setup is aborted.
//---------------------------------------------------------------------------
function OnEnd()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bOpt1, bOpt2;
    NUMBER nvType, nvSize, nvServiceState;
begin
	WriteLogFile("Starting OnEnd.");

	if (hMutex) then
		CloseHandle(hMutex);
	endif;
	//fix ENG-15625 edit by liuyang 2016.10.14 begin
	DeleteFolder( svMongodbinitInstalldir);      
	//fix ENG-15625 edit by liuyang 2016.10.14 end
	if (!REMOVEONLY) then
		if(SYSINFO.bIsWow64) then 
			REGDB_OPTIONS = REGDB_OPTIONS | REGDB_OPTION_WOW64_64KEY;
			nvType = REGDB_STRING; 
			nvSize = -1;  

			if (RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE) = 0) then
				RegDBSetKeyValueEx(REGROOT, REGKEY_WORKERSERVER, nvType, svFeatureWorkerServer, nvSize);
				RegDBSetKeyValueEx(REGROOT, REGKEY_WEBAPISERVICE, nvType, svFeatureWebAPIService, nvSize);
				RegDBSetKeyValueEx(REGROOT, REGKEY_WEBSERVER, nvType, svFeatureWebServer, nvSize);
			endif;
    
			REGDB_OPTIONS = REGDB_OPTIONS & ~REGDB_OPTION_WOW64_64KEY;
		endif;

		WriteRegistryDump();
    endif;    
    
    if (REMOVEONLY) then
		DeleteRegistryDump();
		DeleteFolder(DUMP_PATH);
    endif;

	WriteLogFile("Exiting OnEnd.");
end;

// SdShowInfoList -----------------------------------------------------------
function  SdShowInfoList(szTitle, szMsg, list )
    string  szDlg, szTemp, svString, svIgnore;
    number  nId, nTemp, nResult, nvItem, nSdDialog;
    BOOL    bDone;
    HWND    hwndDlg;
    LIST    nOldlist;
begin

    if((!list) || (list = LIST_NULL)) then
        return ISERR_INVALID_ARG;
    endif;

    szDlg     = SD_DLG_SHOWINFOLIST;
    nSdDialog = SD_NDLG_SHOWINFOLIST;

    // record data produced by this dialog
    if(MODE=SILENTMODE) then
        SdMakeName( szAppKey, szDlg, szTitle, nSdShowInfoList );
        SilentReadData( szAppKey, "Result", DATA_NUMBER, szTemp, nId );
        return nId;
    endif;

    // ensure general initialization is complete
    if(!bSdInit) then
        SdInit();
    endif;

    if(EzDefineDialog( szDlg, "", "", SD_NDLG_SHOWINFOLIST ) = DLG_ERR) then
        return -1;
    endif;

    // Loop in dialog until the user selects a standard button
    bDone = FALSE;

    while (!bDone)

        nId = WaitOnDialog( szDlg );

        switch(nId)

        case DLG_INIT:

            hwndDlg = CmdGetHwndDlg( szDlg );
            SdGeneralInit( szDlg, hwndDlg, STYLE_BOLD, szSdProduct );

            if( szMsg != "" ) then
                SdSetStatic( szDlg, SD_COMPONENT_MSG, szMsg );
            endif;

            SdSetDlgTitle(szDlg, hwndDlg, szTitle);

            nResult = ListCurrentString( list, svIgnore );

            if( nResult < 0 && nResult != END_OF_LIST ) then

                nOldlist = list;
                list = ListCreate( STRINGLIST );

                nResult = ListGetFirstItem( nOldlist, nvItem );
                while( nResult != END_OF_LIST && nResult >= 0 )
                    NumToStr( svString, nvItem );
                    ListAddString( list, svString, AFTER);
                    nResult = ListGetNextItem( nOldlist, nvItem );
                endwhile;
            endif;

            CtrlSetMLEText(szDlg, SD_EDIT_INFO, list);

        case NEXT:

            nId    = NEXT;
            bDone  = TRUE;

        case BACK:

            nId    = BACK;
            bDone  = TRUE;

        case DLG_ERR:

            SdError( -1, "SdShowInfoList" );
            nId    = -1;
            bDone  = TRUE;

        case DLG_CLOSE:

            SdCloseDlg( hwndDlg, nId, bDone );

        default:

            // check standard handling
            if(SdIsStdButton( nId ) && SdDoStdButton( nId )) then
                bDone = TRUE;
            endif;

        endswitch;

    endwhile;

    // Cleanup Dialog
    EndDialog( szDlg );
    ReleaseDialog( szDlg );
    SdUnInit();

    // record data produced by this dialog
    if(MODE=RECORDMODE) then
        SdMakeName( szAppKey, szDlg, szTitle, nSdShowInfoList );
        SilentWriteData( szAppKey, "Result", DATA_NUMBER, "", nId );
    endif;

    return nId;

end;

//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// The OnFirstUIAfter event called by the framework after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bOpt1, bOpt2;
    NUMBER nvResult; 
    STRING svResult;
begin
   	WriteLogFile("Starting OnFirstUIAfter.");

	Disable(STATUSEX);  

	nvResult = ServiceStartService ("seclogon","");

	if (nvResult >=ISERR_SUCCESS) then 
		NumToStr(svResult, nvResult); 
		WriteLogFile("Service : Secondary logon started successfully "+svResult);			
	else 
		WriteLogFile("Failed to start service: Secondary logon "+FormatMessage(nvResult));
	endif;

	if FeatureIsItemSelected (MEDIA,"WebAPIService") then
		RunApplication(SUPPORTDIR ^"startwebsite.bat"," \"" + 
					   svWSSSiteIndex + "\" \"" + svWSSSiteName + "\"", 
					   FALSE,TRUE,TRUE);                                                         
	endif;

	if FeatureIsItemSelected (MEDIA,"WebServer") then
		RunApplication(SUPPORTDIR ^"startwebsite.bat", " \"" + 
					   svWSCSiteIndex + "\" \"" + svWSCSiteName + "\"", 
					   FALSE, TRUE, TRUE);    
	endif;

	szMsg1 = "NetBrain Integrated Edition has been installed successfully. Click Finish to exit the wizard.";
	szMsg2 = ""; 

	bOpt1   = FALSE;
    bOpt2   = FALSE;    

    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else
	    SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bOpt1 , bOpt2 );
	endif;

   	WriteLogFile("Exiting OnFirstUIAfter.");
end;

//---------------------------------------------------------------------------
// OnMaintUIAfter
//
// The OnMaintUIAfter event called by the framework after the file transfer
// of the setup when the setup is running in maintenance mode. By default
// this event displays UI that informs the end user that the maintenance setup
// has been completed successfully.
//---------------------------------------------------------------------------
function OnMaintUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bOpt1, bOpt2;
begin
	Disable(STATUSEX);

    if( REMOVEALLMODE ) then
        szTitle = SdLoadString(IFX_SDFINISH_REMOVE_TITLE);
        szMsg1 = "NetBrain Integrated Edition has been successfully uninstalled.";
    else
        szTitle = SdLoadString(IFX_SDFINISH_MAINT_TITLE);    
        szMsg1  = SdLoadString(IFX_SDFINISH_MAINT_MSG1);
    endif;

	DeleteDir(INSTALLDIR, ONLYDIR);    	

	bOpt1   = FALSE;
    bOpt2   = FALSE;    

    if ( BATCH_INSTALL ) then
    	SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else    
       	SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bOpt1 , bOpt2 );
    endif;
end;
